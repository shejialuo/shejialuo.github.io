<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洛的藏书阁</title>
  
  
  <link href="https://luolibrary.com/atom.xml" rel="self"/>
  
  <link href="https://luolibrary.com/"/>
  <updated>2024-12-25T16:34:53.403Z</updated>
  <id>https://luolibrary.com/</id>
  
  <author>
    <name>shejialuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024年终总结</title>
    <link href="https://luolibrary.com/2024/12/26/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://luolibrary.com/2024/12/26/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2024-12-25T16:34:35.000Z</published>
    <updated>2024-12-25T16:34:53.403Z</updated>
    
    <content type="html"><![CDATA[<p>眨眼的瞬间，2024年就要过去了。记忆中突然飘来我曾在西电的网安大楼写下了2023年终总结的碎片。如今的我坐在上海的小小出租屋里，不禁回望四周，感慨时间的无情流逝。在这淡淡的哀愁中，我又回想起《将进酒》中的名句。</p><blockquote><p>君不见黄河之水天上来，奔流到海不复回。<br>君不见高堂明镜悲白发，朝如青丝暮成雪。</p></blockquote><p>此时此刻，我的手停留在键盘之上，不知道该如何去表达自己的情感。各种复杂的情感纠结于我心中，无论如何，我只是想刻下自己的存在。</p><h2 id="走向开源世界：Git"><a href="#走向开源世界：Git" class="headerlink" title="走向开源世界：Git"></a>走向开源世界：Git</h2><p>依稀记得2023年的时候，我一个人前往了上海实习，在那个小小的出租屋里，我总会觉得寂寞。突然想起自己在2023年的年终总结刻下的话语：</p><blockquote><p>上班的体验是很好的，然而晚上一个人待在上海小小的出租屋里面，感受到的确实实在的寂寞。突然急切地希望自己身边能有一个人陪伴，然而我却厌恶自己的想法，如果是因为寂寞就去靠近一个人，对她来说这是一个不公平的事情。</p></blockquote><p><strong>必须给自己找点事情做，不想在2024年重蹈覆辙。即便是一个人生活，也想让自己的每天变得精彩，想让自己鲜明地体会到活着的感觉</strong>。怀揣着上面的想法，我决定给自己找一些有意义的事情去做。借着自己最后的学生生涯，我选择参加了谷歌开源之夏（GSoC），荣幸地被Git开源项目选上，为Git的引用实现一致性检查（<a href="https://summerofcode.withgoogle.com/archive/2024/projects/ukm4PTEF">Implement consistency check for refs</a>）。</p><p>在2024年5月到2024年8月期间，经历了许多痛苦（从版本1迭代到了版本16），我的代码终于提交到了Git仓库里面。看到自己能够为这么一个基础的软件做出贡献，自己实现的功能能够被整个世界的程序员使用，我由衷地为自己感到自豪。我十分感谢指导我的两位导师<a href="https://github.com/pks-t">Patrick</a>和<a href="https://github.com/KarthikNayak">Karthik</a>，给予了我大量的指导和帮助。我对Patrick和Karthik在项目结束对我说的一句话印象特别深刻：</p><blockquote><p>Take on the role of the subject matter expert. This is rather hard initially, but at the end of the project you already had quite a lot of knowledge around how the whole infrastructure works. Carefully answering questions, explaining why certain proposals are not feasible or why your tradeoffs are better demonstrates that you know what you are doing. It’s important to find the right balance between taking feedback from others and confidently saying why your version makes sense. (扮演主题专家的角色。这一开始可能会有些困难，但在项目结束时，你已经对整个架构的运作方式积累了相当多的了解。耐心回答问题，解释为什么某些提议不可行，或者为什么你的权衡更优，这些都能展示你对自己的工作了然于心。找到在接受他人反馈和自信地说明自己方案更合理之间的平衡点非常重要。)</p></blockquote><p>在谷歌开源之夏的旅程中除了收获了代码能力的进步，我觉得最大的收获是加强了人与人之间的联系，我与我的两位导师Patrick和Karthik建立了良好的关系。我原先很少用英文和别人交谈，最开始的第一次和Patrick视频会议，我相当的紧张。同时，我觉得和git社区建立了良好的关系，通过一个开源项目能够让生命中本不会产生交集的大家联系起来，体会到了开源的魅力。</p><p>尽管谷歌开源之下在8月底就结束了，我仍然留在Git社区继续完善我该做的工作，并开始审核别人的代码来了解Git其他部分的功能是如何运作的。今年的我提交了20个commit:</p><ol><li><a href="https://github.com/git/git/commit/b3d175409d9bfe005515ffe361e959fb9965111c">Ref consistency check infrastructure setup</a></li><li><a href="https://github.com/git/git/commit/57e81b59f35198afedae18e8363dbffdc96c481d">Ref content consistency check for file backend</a></li></ol><h2 id="研究生毕业"><a href="#研究生毕业" class="headerlink" title="研究生毕业"></a>研究生毕业</h2><p>伴随着6月底的到来，我也从西电毕业了，人生迈入一个新的阶段。比起本科毕业的时候，或许是因为习惯了离别的原因，又或许是期待自己在上海的新生活的原因，我似乎没有那么伤感了。然而，我的内心仍然悸动，看着实验室的工位变得如此干净，总有种自己的存在被抹去的感觉。回想自己在西电的三年，不知道自己是否变得更加温柔了，也不知道自己是否变得更加勇敢了，更不知道自己是否前进了。诸多回忆突然涌入脑海，让我不知所措。</p><p>然而，我深刻地意识到我即将从集体生活转变为个人生活。再也无法和雨晴一起晚上10点后在实验室打玩游戏，一起回寝室了。再也无法简单地在实验室和兄弟们说一句，今天要不要去小码头搓一顿改善一下伙食。我突然觉得伤感，让我想起一句歌词：</p><blockquote><p>倘若从这场梦醒来，我的孤独该付诸何处。</p></blockquote><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>比起2023在上海实习的我，我更习惯一个人的生活了。我觉得是因为我在2023年已经体会了孤独一人的感觉，提前做了一些准备。至少意识到，得利用好自己的时间，如果任凭时间流逝，无所事事就会觉得空虚，。然而，<strong>这样想是不是会太寂寞呢</strong>？我还是不太想妥协，也不想对自己说谎。</p><p>我不知道自己是否做到了怀揣着生命力和想象力去生活，今年从正式工作开始，重拾了阅读的习惯，我真的好久没有看过书了，然而我始终觉得看书是一个很美好的事情，总能让我静下心来。我原先很不会去享受生活，和同事在每天中午溜圈的时候，我才意识到自己的局限性，其实我也是容易待在舒适圈里面的。于是努力去尝试了更多新鲜的事物，自己周末骑自行车到处去逛，偶尔去咖啡馆看书。但是还是很难，一个人的动力是真的太小了。</p><h2 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h2><p>说影响力是不是太膨胀呢？（逃</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>其实今年最令我开心的时候，莫过于我的博客有7000多的浏览量，一想到我曾经写下的文字或多或少影响到了在这个世界上的某一个陌生人，给他带来了某些启发，又或是鼓舞了他。我由衷地觉得自己的坚持是有意义的。</p><p><img src="https://s2.loli.net/2024/12/26/DaG3KmguAoYftdb.png" alt="博客数据"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>完成了谷歌开源之夏后，Git社区对我进行了一次<a href="https://git.github.io/rev_news/2024/09/30/edition-115/">采访</a>，我其实对这次采访很是惊讶的，毕竟我觉得我只是完成了一份微小的工作，十分感谢社区的友好。</p><p>可能最开心的还是自己实现的功能上了所谓的<a href="https://s2.loli.net/2024/12/26/DaG3KmguAoYftdb.png">头条</a>，逐渐在这个世界里面刻下自己一些微不足道的存在。</p><p><img src="https://s2.loli.net/2024/12/26/Oc4vSMYy32rXp5A.png" alt="git news"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>耳边传来熟悉的音乐，在这白色相簿的季节，听着“Powder Snow”。</p><blockquote><p>点点细雪轻轻地从天而降<br>接在手心时，我不由得难过<br>停下脚步的你，望着哪个地方呢<br>仰望天空时，是否想起了我们的曾经</p></blockquote><p>在这无形的时间中，简单刻下自己的存在。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;眨眼的瞬间，2024年就要过去了。记忆中突然飘来我曾在西电的网安大楼写下了2023年终总结的碎片。如今的我坐在上海的小小出租屋里，不禁回望四周，感慨时间的无情流逝。在这淡淡的哀愁中，我又回想起《将进酒》中的名句。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;君不见黄河之水天上来</summary>
        
      
    
    
    
    <category term="随笔" scheme="https://luolibrary.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>星之终途</title>
    <link href="https://luolibrary.com/2024/08/27/%E6%98%9F%E4%B9%8B%E7%BB%88%E9%80%94/"/>
    <id>https://luolibrary.com/2024/08/27/%E6%98%9F%E4%B9%8B%E7%BB%88%E9%80%94/</id>
    <published>2024-08-26T16:06:02.000Z</published>
    <updated>2024-08-26T16:39:54.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>这部作品我是冲着田中先生的名气购入的，其实我更多的是想看田中先生想在这部作品表达什么观点。本作是一个典型的公路片剧情，不愧为二次元的死亡搁浅。田中以极其紧凑的方式走完了剧情，我打完本部作品仅用了5个小时，还包括了我摘抄的时间。</p><p>我认为作品的核心一如既往地贯穿了田中的理念。我个人认为田中并不是想去探讨所谓的人性，而是一如既往地收束到爱与希望。先抛开对于女主的塑造，片中最大的冲突在于科学家希望通过菲莉亚来拯救人类，然而裘德并不认为人类所需要拯救。我认为这就是田中的核心观点。我也认为人类不需要拯救，人类会一直丑陋地活下去。</p><p>里面有个核心的对于女主的塑造在于“成为人类”。我认为田中的塑造的最好一点是，女主在成为人类的过程中非常地自然，我在里面看到了自己的成长。我特别喜欢女主的这一句话：</p><blockquote><p>菲莉亚：这个世界，难道被设计成了一旦想要帮助他人就会绝对失败的样子吗？</p></blockquote><p>我相信，我们都曾有过这个疑问。这种自嘲的发言让我颇有既视感。</p><p>说实话，本作有很多背景也没有交待清楚，比如说两个阵营AI的斗争，让我又想起了rewrite里面盖亚和守护者的对立。可惜，本作仅仅是短片，并没有继续深入。</p><p>总的来说，体验很好，如同一场电影一般。</p><h2 id="摘抄"><a href="#摘抄" class="headerlink" title="摘抄"></a>摘抄</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>裘德：活人凑在一起就是这么臭。<br>菲莉亚：如果我也变臭，我就能成为人了吗？<br>裘德：不会的。</p></blockquote><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>……我不懂这种感情。<br>从未想过去理解，以后也没打算理解。<br>想理解这种感情就要拥有家庭。<br>也就是会扎下根。</p></blockquote><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>那时，她也从头到尾没有大喊大叫过。<br>仅仅是用她锐利冷静的目光盯着我，像是在劝说我。<br>态度的言下之意仿佛是我做错了什么。<br>毫无疑问在她心中，残忍就是邪恶。<br>也认为不杀生就是正义。<br>甚至为了这份正义，即使自己挨饿也在所不惜。<br>她一定觉得这是美好的。</p></blockquote><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><blockquote><p>我与她共处的回忆理应数不胜数。<br>然而，这些回忆却无法按照时间顺序衔接起来。<br>事情发生的向后顺序已经变得模糊不清。<br>……这些回忆已经被时间所冲淡。<br>几年前还记得的事情，现在印象已然十分稀薄。<br>留下了深刻印象的，反倒净是些争论争吵。<br>在我看来，她的主张完全是不可理喻的。<br>她不愿意杀死鹿或者兔子，但也并非素质主义者。<br>肉干她一样爱吃。<br>菲莉亚也是如此。<br>保存用的肉类就可以毫无顾忌地吃下去。<br>要我说的话，这只不过是自欺欺人。</p></blockquote><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><blockquote><p>有些人对猎杀哺乳动物有抵触情绪，却对杀鱼或昆虫之类的并不在意。<br>……对我来说是难以理解的想法，但确实是存在的。</p></blockquote><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><blockquote><p>她是一个喜爱美好事物的女人。<br>总是憧憬着人类的尊严与善良，还有不再残酷的世界。<br>也会拒绝拿枪自卫。<br>也不喜欢我携带武装。<br>厌恶枪支。</p></blockquote><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><blockquote><p>裘德：那毕竟人类就是最可怕的。<br>一提到这个话题，菲莉亚的表情就复杂了起来。</p></blockquote><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><blockquote><p>菲莉亚：从一出生就知道所有事情的话，就不太像人类了吧。</p></blockquote><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><blockquote><p>裘德：……你觉得为什么父母会为了孩子舍弃生命？<br>菲莉亚：因为人类很伟大。<br>裘德：不对，有确切的理由。<br>菲莉亚：是什么？<br>裘德：本能。<br>菲莉亚：……？<br>裘德：为什么父母会重视孩子胜过生命？<br>菲莉亚：因为爱他们？<br>裘德：为什么会爱？<br>菲莉亚：因为是自己的孩子？<br>裘德：所以从孩子出生的那一刻起，就爱着他们。<br>菲莉亚：……是吧。<br>裘德：那会是真正的爱吗？<br>菲莉亚：什么意思？<br>裘德：还不知道这个婴儿会是怎样的人，只是因为是自己的孩子就会爱他。<br>裘德：通常情况下，一个人爱上另一个人是在了解对方以后。<br>裘德：但是对孩子的爱却并非如此，而且是无条件且自动的。为什么呢。<br>菲莉亚：……<br>裘德：因为基因在人的本能里刻下了要保护后代的信息。<br>菲莉亚：哎？<br>裘德：我不觉得那必然是一种崇高的行为，单纯只是本能。<br>菲莉亚：那么，父母为了孩子舍弃生命也……<br>裘德：是因为基因命令他们这么做。<br>裘德：不好意思好像是我在破坏你的幻想，但如果你过于理想化人类，总有一天会伤到你自己的。<br>裘德：无法好好爱孩子的父母也是大有人在的。<br>菲莉亚：……但是至少，会有一点真正的爱，对吧？<br>裘德：当然也有。一起生活多年后，不是本能的爱也会掺入进来。如果是那种爱意，我也不是不能理解。<br>菲莉亚：……那就足够了。哪怕只有一点点，都很伟大。<br>菲莉亚：我也是有本能的吗？<br>裘德：你那想成为人类的愿望，正是类似本能的东西。<br>菲莉亚：哦哦。<br>裘德：你为什么想成为人类？<br>菲莉亚：因为想成为。<br>裘德：还是在被出厂设置牵着走啊。<br>裘德：记住，让本能伴随上思考，哪怕是事后想的。那才是人类。<br>菲莉亚：……好难。</p></blockquote><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><blockquote><p>菲莉亚：这个世界，难道被设计成了一旦想要帮助他人就会绝对失败的样子吗？<br>裘德：哈哈哈。<br>菲莉亚：为什么要笑呢？<br>裘德：没什么，只是觉得你说的很对。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="游戏笔记" scheme="https://luolibrary.com/categories/%E6%B8%B8%E6%88%8F%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="GalGame" scheme="https://luolibrary.com/tags/GalGame/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Final Report</title>
    <link href="https://luolibrary.com/2024/08/25/GSoC-Final-Report/"/>
    <id>https://luolibrary.com/2024/08/25/GSoC-Final-Report/</id>
    <published>2024-08-25T14:32:06.000Z</published>
    <updated>2024-08-25T14:37:08.320Z</updated>
    
    <content type="html"><![CDATA[<p>Suddenly, I recalled myself writing the proposal back then, and I couldn’t help but feel a bit wistful. Every time it ends, there’s always an unintentional sense of sadness. After three months, my GSoC project has also come to an end.</p><h2 id="The-Motivation-of-The-Project"><a href="#The-Motivation-of-The-Project" class="headerlink" title="The Motivation of The Project"></a>The Motivation of The Project</h2><p>The <code>git-fsck(1)</code> command is mainly used to check the consistency of the object database which misses check for the ref database. Although <code>git-fsck(1)</code> implicitly checks some properties of the ref database when checking connectivity, these checks aren’t sufficient to ensure that all refs are properly consistent like <a href="https://lore.kernel.org/git/6cfee0e4-3285-4f18-91ff-d097da9de737@rd10.de/">report</a> shows.</p><p>The goal of this small GSoC project is to establish the infrastructure for the ref consistency check, enabling developers to easily add checks for both the files backend and the reftable backend. For more detailed information, please refer to the <a href="https://docs.google.com/document/d/1pWnnyykGmJIN-wyosZ3PtueFfs_BRdvJq-cwroRorBI/">proposal</a>.</p><h2 id="The-Patches"><a href="#The-Patches" class="headerlink" title="The Patches"></a>The Patches</h2><p>I began my work by implementing the infrastructure. However, during the review process, the design underwent significant changes. My main focus was on the following tasks:</p><ol><li>Refactoring the fsck error messages to make them generic, allowing both the object database and the ref database to use the same fsck error message interfaces to avoid repetition.</li><li>Utilizing the existing polymorphism provided by the <code>ref_storage_be</code> structure. For every backend, it needs to provide its own function pointer which would bring a lot of flexibility.</li><li>Designing extensible interfaces for checking ref consistency in the files backend.</li><li>Adding a ref name consistency check for the files backend.</li></ol><p>The ultimate merged patch links are given below:</p><ul><li><a href="https://lore.kernel.org/git/ZrSq3Z8tYrGwBOqC@ArchLinux/">[GSoC][PATCH v16 1&#x2F;9] fsck: rename “skiplist” to “skip_oids”</a>.</li><li><a href="https://lore.kernel.org/git/ZrSq6XV8hKRZMrnt@ArchLinux/">[GSoC][PATCH v16 2&#x2F;9] fsck: rename objects-related fsck error functions</a></li><li><a href="https://lore.kernel.org/git/ZrSrdwOCWrXpMYIA@ArchLinux/">[GSoC][PATCH v16 3&#x2F;9] fsck: make “fsck_error” callback generic</a></li><li><a href="https://lore.kernel.org/git/ZrSrgRGwI_jldprn@ArchLinux/">[GSoC][PATCH v16 4&#x2F;9] fsck: add a unified interface for reporting fsck messages</a></li><li><a href="https://lore.kernel.org/git/ZrSrjO2ltoJuppKA@ArchLinux/">[GSoC][PATCH v16 5&#x2F;9] fsck: add refs report function</a></li><li><a href="https://lore.kernel.org/git/ZrSrlU8TesYsTb2C@ArchLinux/">[GSoC][PATCH v16 6&#x2F;9] refs: set up ref consistency check infrastructure</a></li><li><a href="https://lore.kernel.org/git/ZrSroE8vLlZCK2jp@ArchLinux/">[GSoC][PATCH v16 7&#x2F;9] builtin&#x2F;refs: add verify subcommand</a></li><li><a href="https://lore.kernel.org/git/ZrSsk27zqOqSXTpH@ArchLinux/">[GSoC][PATCH v16 8&#x2F;9] files-backend: add unified interface for refs scanning</a></li><li><a href="https://lore.kernel.org/git/ZrSsngBqfyTPDg7g@ArchLinux/">[GSoC][PATCH v16 9&#x2F;9] fsck: add ref name check for files backend</a></li></ul><p>This series has finally been merged into the <a href="https://github.com/git/git/commit/b3d175409d9bfe005515ffe361e959fb9965111c">master</a> branch.</p><p>After establishing the infrastructure, I continue to implement additional checks for the files backend, as shown in the following patch links:</p><ul><li><a href="https://lore.kernel.org/git/ZsIM0L72bei9Fudt@ArchLinux/">[PATCH v1 1&#x2F;4] fsck: introduce “FSCK_REF_REPORT_DEFAULT” macro</a></li><li><a href="https://lore.kernel.org/git/ZsIM2DRDbJsvNjAM@ArchLinux/">[PATCH v1 2&#x2F;4] ref: add regular ref content check for files backend</a></li><li><a href="https://lore.kernel.org/git/ZsIM4OZWfylcP5Ix@ArchLinux/">[PATCH v1 3&#x2F;4] ref: add symbolic ref content check for files backend</a></li><li><a href="https://lore.kernel.org/git/ZsIM6JZ7miA3j09j@ArchLinux/">[PATCH v1 4&#x2F;4] ref: add symlink ref consistency check for files backend</a></li></ul><p>However, this series is still under review, and I plan to continue following up after GSoC.</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><h3 id="Design-Challenge"><a href="#Design-Challenge" class="headerlink" title="Design Challenge"></a>Design Challenge</h3><p>Implementation is much more complex than refactoring. One of my intuitive feelings is that when designing something myself, I need to consider many factors. However, during the implementation process, I made many mistakes, mainly in two areas:</p><ol><li>Over-engineering: I was always concerned about the extensibility of the implementation, worried that poor design would require future refactoring. However, I didn’t realize that this could introduce noise into the code. We should focus solely on the features we need right now.</li><li>Inability to balance between building something that can be easily extended in the future and something that is specific to the task at hand.</li></ol><p>Here are the challenges I encountered during the implementation process:</p><h4 id="Whether-We-Need-To-Refactor-“fsck-options”"><a href="#Whether-We-Need-To-Refactor-“fsck-options”" class="headerlink" title="Whether We Need To Refactor “fsck_options”"></a>Whether We Need To Refactor “fsck_options”</h4><p>There are many fields in fsck_options that are specific to the object database. My first mistake was trying to make <code>fsck_options</code> contain the general options and sub-structures, which is what I attempted in the previous patch.</p><blockquote><p>The git-fsck(1) focuses on object database consistency check. It relies on the “fsck_options” to interact with fsck error levels. However “fsck_options” aims at checking the object database which contains a lot of fields only related to object database.</p><p>In order to add ref operations, create a new struct named “fsck_refs_options” and a new struct named “fsck_objs_options”. Remove object-related fields from “fsck_options” to “fsck_objs_options”. Change the “fsck_options” with three parts of members:</p><ol><li>The “fsck_refs_options”.</li><li>The “fsck_objs_options”.</li><li>The common settings both for refs and objects. Because we leave common settings in “fsck_options”. The setup process could be fully reused without any code changing.</li></ol></blockquote><p>While this approach may seem natural, it introduced a lot of complexity because there is a significant amount of existing code that accepts <code>struct fsck_options *</code> as a parameter. As a result, we had to deal with a lot of code that was not directly related to our main goal. In the final implementation, I simply added a <code>verbose</code> field to the <code>fsck_options</code>.</p><p>Junio gave me a wonderful suggestion:</p><blockquote><p>Just like premature optimization is bad, premature factoring and over-modularization is bad.</p></blockquote><h4 id="How-to-Reuse-“report”-Function"><a href="#How-to-Reuse-“report”-Function" class="headerlink" title="How to Reuse “report” Function"></a>How to Reuse “report” Function</h4><p>To adapt to the existing fsck error levels, my initial approach was to create a new <code>fsck_report_ref</code> function that was separate from the object report function <code>report</code>. However, Patrick, Karthik, and Junio disagreed with this design, suggesting that I should reuse the <code>report</code> function.</p><p>The <code>report</code> function is closely tied to object reporting. At the time, I considered adding parameters to the <code>report</code> function and its corresponding callback function <code>error_func</code> to make their prototypes consistent. However, I was not satisfied with this solution because we couldn’t predict whether additional parameters would be needed for other ref checks in the future, which would result in poor extensibility.</p><p>But Patrick gave me a wonderful suggestion which eventually solved the problem:</p><blockquote><p>A better design would likely be to make <code>error_func()</code> receive a <code>void*</code> pointer such that <code>error_func()</code> and then have the respective subsystems provide a function that knows to format the message while receiving either a <code>struct fsck_object_report *</code> or a <code>struct fsck_ref_report *</code>.</p></blockquote><h3 id="Long-Review-Duration"><a href="#Long-Review-Duration" class="headerlink" title="Long Review Duration"></a>Long Review Duration</h3><p>Building the ref consistency check infrastructure posed challenges not only in terms of design and coding but also due to the lengthy review process. This created a significant mental burden for me during the middle of GSoC. This is what I have recorded in my <a href="https://luolibrary.com/2024/07/16/GSoC-Week-7/">GSoC Week 7</a> blog:</p><blockquote><p>The recent challenges I’ve encountered mainly stem from two aspects. Over the past two weeks, I’ve felt mentally exhausted because I haven’t received much positive feedback. Since May 30th, my first patch is still under review. Sometimes, I can’t help but feel the pressure from my peers. Seeing other GSoC participants successfully merge several patches does indeed make me feel pressured. Therefore, I realize that I must learn how to adjust my mindset during prolonged review periods.</p></blockquote><h2 id="After-GSoC"><a href="#After-GSoC" class="headerlink" title="After GSoC"></a>After GSoC</h2><p>After GSoC, I decided to remain involved with the Git community to continue the work I need to complete. My tentative roadmap is as follows:</p><ol><li>Implement the pack-refs consistency check for the files backend.</li><li>Implement the reflogs consistency check for the files backend.</li><li>Implement the consistency check for the reftable backend.</li><li>Separate the object database check logic from <code>git-fsck(1)</code>.</li><li>Enhance the <code>git-fsck(1)</code> command to allow users to easily disable subprocess checks, providing greater flexibility.</li></ol><p>There is a lot to accomplish, which is exciting!</p><h2 id="Closing-Remarks"><a href="#Closing-Remarks" class="headerlink" title="Closing Remarks"></a>Closing Remarks</h2><p>During my GSoC journey, besides improving my coding skills, I believe the greatest gain was strengthening connections between people. I established a good relationship with my two mentors, Patrick and Karthik. Initially, I rarely conversed in English with others, and during my first video meeting with Patrick, I was quite nervous, worried about my limited English speaking skills.</p><p>Additionally, I feel that I have built a good relationship with the Git community. Through an open-source project, I experienced the charm of open source, as it connects people who might not have otherwise crossed paths in life.</p><p>I am especially grateful to my two mentors from GitLab, <a href="https://gitlab.com/pks-gitlab">Patrick</a> and <a href="https://www.linkedin.com/in/karthik%2Dnayak/">Karthik</a>. They provided me with a lot of guidance, embodying the role of a teacher who imparts knowledge and resolves doubts. I also want to thank <a href="https://github.com/gitster/">Junio</a>, Eric, and <a href="https://www.linkedin.com/in/justintobler/">Justin</a> for their meticulous and detailed work during the code review process, which made the final implementation exceptionally elegant.</p><p>I also feel quite proud of myself for being able to implement a new feature for foundational software used by so many people, something I once thought could only happen in my dreams. I am very grateful for this experience and hope that I can become a mentor in the future, igniting the flame in others’ hearts.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Suddenly, I recalled myself writing the proposal back then, and I couldn’t help but feel a bit wistful. Every time it ends, there’s</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 10-11</title>
    <link href="https://luolibrary.com/2024/08/13/GSoC-Week-10-11/"/>
    <id>https://luolibrary.com/2024/08/13/GSoC-Week-10-11/</id>
    <published>2024-08-13T13:41:26.000Z</published>
    <updated>2024-08-13T13:41:42.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>In these two weeks, I continue to solve the reviews. After I have sent the <a href="https://lore.kernel.org/git/ZqeXrPROpEg_pRS2@ArchLinux/">Patch v13</a>. Patrick gives an opinion here, we want to reuse the <code>fsck_vreport</code> function here. We want to make it generic but we design the callback not generic. And Patrick gives a wonderful idea here:</p><blockquote><p>A better design would likely be to make <code>error_func()</code> receive a <code>void*</code> pointer such that <code>error_func()</code> and then have the respective subsystems provide a function that knows to format the message while receiving either a <code>struct fsck_object_report *</code> or a <code>struct fsck_ref_report *</code>.</p></blockquote><p>However, Patrick thinks we may put unnecessary effort here to make things complicated again. But after discussion, I think we should use the below design for the following reasons:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*fsck_error)</span><span class="params">(<span class="keyword">struct</span> fsck_options *o,</span></span><br><span class="line"><span class="params">                          <span class="type">void</span> *info,</span></span><br><span class="line"><span class="params">                          <span class="keyword">enum</span> fsck_msg_type msg_type, <span class="keyword">enum</span> fsck_msg_id msg_id,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">char</span> *message)</span>;</span><br></pre></td></tr></table></figure><ol><li>We only expose one interface called <code>fsck_reportf</code> which will make the code clear. Actually, there is no different between reporting refs and reporting objects.</li><li>We provide more extensibility here, because we will never change <code>fsck_reportf</code> and <code>fsck_error</code> prototype when we want to add more info for either refs or objects.</li></ol><p>And Patrick advices me that I should drop the last patch “[PATCH v13 10&#x2F;10] fsck: add ref content check for files backend”, because we should speed up the review process due to the ddl of GSoC.</p><p>And Junio gives two advices:</p><ol><li>The prototype of <code>files_fsck_refs_fn</code> should adapt to the Patrick’s new change.</li><li>Unless the most common use of an array is to pass it around as a collection of items and operate on the collection, it is a better practice to name an array with a singular noun.  Name the array as <code>fsck_refs_fn[]</code> not <code>fsck_refs_fns[]</code>.</li></ol><p>I solve these problems in <a href="https://lore.kernel.org/git/ZqulmWVBaeyP4blf@ArchLinux/">Patch v14</a>:</p><ol><li>By following the advice from Patrick, we should make the callback function be generic by adding only one <code>void *fsck_report</code> parameter. Thus the commit sequence will be much more clearer. And it wll be much easier for reviewers to review. And I have split the commit into more commits in this version.</li><li>Enhance the commit messages to provide more context about why we should do this.</li><li>Patrick advices that we should initialize the <code>fsck_options</code> member when parsing the options. However, because the original <code>strict</code> and <code>verbose</code> field are defined as the bit field, we cannot take the address of them. So I simply remove the bit field.</li><li>As Patrick said, “.lock” should not be reported as error. At current, ignore files ending with “.lock”.</li><li>Add a fsck msg type called “badRefFiletype” which indicates that a ref has a bad file type when scanning the directory.</li><li>Junio advices instead of using <code>fsck_refs_fns</code>, we should use the singular version <code>fsck_refs_fn</code>, fix this.</li><li>Drop the last patch because in this series, we mainly focus on the infra, I will add a series later to add ref content check.</li></ol><p>And I only do some minor changes in <a href="https://lore.kernel.org/git/ZrEBKjzbyxtMdCCx@ArchLinux/">Patch v15</a> and <a href="https://lore.kernel.org/git/ZrSqMmD-quQ18a9F@ArchLinux.localdomain/">Patch v16</a>.</p><p>The code is merged into <a href="https://github.com/git/git/commit/3bde10da94b1424849233d19eeeab475c7a57152">next</a>. What a long journey.</p><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>My GSoC is going to end. But my contribution to Git will bot end. I will implement ref content check. And I will concentrate on writing the final report.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;In these two</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.824: MapReduce</title>
    <link href="https://luolibrary.com/2024/08/04/MIT6-824-MapReduce/"/>
    <id>https://luolibrary.com/2024/08/04/MIT6-824-MapReduce/</id>
    <published>2024-08-04T07:13:57.000Z</published>
    <updated>2024-08-04T12:26:27.367Z</updated>
    
    <content type="html"><![CDATA[<p>This is my record for finish MIT 6.824(spring 2022) first lab <a href="http://nil.csail.mit.edu/6.824/2022/labs/lab-mr.html">MapReduce</a>.</p><h2 id="Sequence-Version"><a href="#Sequence-Version" class="headerlink" title="Sequence Version"></a>Sequence Version</h2><p>Before we dive into how to solve this problem, we first need to understand the sequence version. First, we look at how <code>Map</code> operates.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">intermediate := []mr.KeyValue&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _ filename := <span class="keyword">range</span> os Args[<span class="number">2</span>:] &#123;</span><br><span class="line">  file, err := os.Open(filename)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;cannot open %v&quot;</span>, filename)</span><br><span class="line">  &#125;</span><br><span class="line">  content, err := io.ReadAll(file)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;cannot read %v&quot;</span>, filename)</span><br><span class="line">  &#125;</span><br><span class="line">  file.Close()</span><br><span class="line">  kva := mapf(filename, <span class="type">string</span>(content))</span><br><span class="line">  intermediate = <span class="built_in">append</span>(intermediate, kva...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea for above code is simple. It just calls the user-provided <code>Map</code> function to generate the key-value pair struct <code>mr.KeyValue</code> and put the results into <code>intermediate</code>.</p><p>Next we need to partitioning the <code>intermediate</code> to make it into groups. Actually, we can just sort the results. This is also what the code does.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort.Sort(ByKey(intermediate))</span><br></pre></td></tr></table></figure><p>Now next we need to call user-provided <code>Reduce</code> function. This is also easy. We have already sorted the <code>intermediate</code>. Now we just handle the groups one by one.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(intermediate) &#123;</span><br><span class="line">  j := i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> j &lt; <span class="built_in">len</span>(intermediate) &amp;&amp; intermediate[j].key == intermediate[i].key &#123;</span><br><span class="line">    j++</span><br><span class="line">  &#125;</span><br><span class="line">  values := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">    values = <span class="built_in">append</span>(values, intermediate[k].Value)</span><br><span class="line">  &#125;</span><br><span class="line">  output := reducef(intermediate[i].Key, values)</span><br><span class="line">  fmt.Fprintf(ofile, <span class="string">&quot;%v %v\n&quot;</span>, intermediate[i].Key, output)</span><br><span class="line">  i = j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Need-Analysis"><a href="#Need-Analysis" class="headerlink" title="Need Analysis"></a>Need Analysis</h2><h3 id="Coordinator"><a href="#Coordinator" class="headerlink" title="Coordinator"></a>Coordinator</h3><p>For MapReduce, there should be a coordinator which allocates the tasks. And the coordinator should use data structure to hold the status. The coordinator could not record the result file of the <code>Map</code> operation, because we have used some rules to make a pattern match.</p><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><p>However, for a worker, things would be complicated. In the code, worker could do both <code>Map</code> and <code>Reduce</code>. I don’t think it is a good idea to make them exclusively. So for a worker, it should start two goroutines, one for <code>Map</code> and another for <code>Reduce</code>.</p><p>For <code>Map</code> operation, we should achieve the following functionality:</p><ul><li>Divide the intermediate keys into buckets for <code>nReduce</code> reduce tasks where <code>nReduce</code> is the number of reduce tasks.</li><li>The intermediate files name should be <code>mr-X-Y</code>, where <code>X</code> is the Map task number, and <code>Y</code> is the reduce task number.</li><li>Use <code>encoding/json</code> package to write the key&#x2F;value pairs in JSON format to intermediate files.</li></ul><p>For <code>Reduce</code> operation, we should achieve the following functionality:</p><ul><li>Use <code>encoding/json</code> package to read the key&#x2F;value paris in JSON format from intermediate files.</li><li>Put the output of the Xth reduce task in the file <code>mr-out-X</code>.</li></ul><h2 id="Data-Structure-Design"><a href="#Data-Structure-Design" class="headerlink" title="Data Structure Design"></a>Data Structure Design</h2><p>There are the following things we need to consider:</p><ul><li><p>We need to use the semantic words to represent the states both for the coordinator and workers. However, golang doesn’t provide <code>enum</code> type like C&#x2F;C++. So I decide to use <code>const</code> to emulate the <code>enum</code> type like the following:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WorkingStatus <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  idle       WorkingStatus = <span class="number">0</span></span><br><span class="line">  processing WorkingStatus = <span class="number">1</span></span><br><span class="line">  failed     WorkingStatus = <span class="number">2</span></span><br><span class="line">  terminated WorkingStatus = <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>We need to store the tasks we need to handle in the coordinator and also we need to allocate this task for worker. So we need a way to represent the <code>Map</code> and <code>Reduce</code> task.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MapTask <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID       <span class="type">int</span>    <span class="comment">// the current map task id</span></span><br><span class="line">  Filename <span class="type">string</span> <span class="comment">// the file which the map task is processing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReduceTask <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID           <span class="type">int</span> <span class="comment">// the current reduce task id</span></span><br><span class="line">  MapTaskTotal <span class="type">int</span> <span class="comment">// the current total map task num for the reduce task</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>We need to store the worker information, because the worker may crash. If we do not store this state, we cannot do any crash recovery. Because a worker will handle <code>Map</code>and <code>Reduce</code> task, so we need to also create states to hold task status. I create a <code>WorkerState</code> to combine the <code>MapWorker</code> and <code>ReduceWorker</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MapWorker <span class="keyword">struct</span> &#123;</span><br><span class="line">status    WorkingStatus <span class="comment">// status</span></span><br><span class="line">task      MapTask       <span class="comment">// current task</span></span><br><span class="line">startTime time.Time     <span class="comment">// map task start time</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReduceWorker <span class="keyword">struct</span> &#123;</span><br><span class="line">  status    WorkingStatus <span class="comment">// status</span></span><br><span class="line">  task      ReduceTask    <span class="comment">// current task</span></span><br><span class="line">  startTime time.Time     <span class="comment">// reduce task start time</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WorkerState <span class="keyword">struct</span> &#123;</span><br><span class="line">  id           <span class="type">int</span>          <span class="comment">// Worker identifier</span></span><br><span class="line">  mapWorker    MapWorker    <span class="comment">// the map worker</span></span><br><span class="line">  reduceWorker ReduceWorker <span class="comment">// the reduce worker</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>And we could the following data structure for coordinator:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line">  worker                []WorkerState <span class="comment">// To store the status of the workers</span></span><br><span class="line">  mapTask               []MapTask     <span class="comment">// The map tasks to be done</span></span><br><span class="line">  reduceTask            []ReduceTask  <span class="comment">// The reduce tasks to be done</span></span><br><span class="line">  mapTaskNum            <span class="type">int</span>           <span class="comment">// The total number of map task</span></span><br><span class="line">  reduceTaskNum         <span class="type">int</span>           <span class="comment">// The total number of reduce task</span></span><br><span class="line">  mapTaskFinishedNum    <span class="type">int</span>           <span class="comment">// The number of mapTask finished</span></span><br><span class="line">  reduceTaskFinishedNum <span class="type">int</span>           <span class="comment">// The number of reduceTask finished</span></span><br><span class="line">  allMapFinished        <span class="type">bool</span>          <span class="comment">// To indicate whether all Map operations are finished</span></span><br><span class="line">  allReduceFinished     <span class="type">bool</span>          <span class="comment">// To indicate whether all Reduce operations are finished</span></span><br><span class="line">  status                WorkingStatus <span class="comment">// The status of the coordinator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RPC-Operations"><a href="#RPC-Operations" class="headerlink" title="RPC Operations"></a>RPC Operations</h2><p>Next, we need to handle the rpc operations where we need to consider the synchronization between workers and coordinator.</p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>When a worker is initialized, it should call <code>Register</code> RPC. The coordinator should lock the mutex and update the <code>worker</code> field and return the id and the reduce bucket to the worker like the following:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RegisterRequest <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RegisterResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID      <span class="type">int</span> <span class="comment">// the worker identifier</span></span><br><span class="line">  NReduce <span class="type">int</span> <span class="comment">// the reduce bucket</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> Register(request *RegisterRequest, response *RegisterResponse) <span class="type">error</span> &#123;</span><br><span class="line">  mutex.Lock()</span><br><span class="line">  <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line"></span><br><span class="line">  newId := <span class="built_in">len</span>(c.worker)</span><br><span class="line"></span><br><span class="line">  newWorker := WorkerState&#123;</span><br><span class="line">    id: newId,</span><br><span class="line">    mapWorker: MapWorker&#123;</span><br><span class="line">      status: idle,</span><br><span class="line">    &#125;,</span><br><span class="line">    reduceWorker: ReduceWorker&#123;</span><br><span class="line">      status: idle,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  c.worker = <span class="built_in">append</span>(c.worker, newWorker)</span><br><span class="line"></span><br><span class="line">  response.ID = newId</span><br><span class="line">  response.NReduce = c.reduceTaskNum</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Request-Map-Task"><a href="#Request-Map-Task" class="headerlink" title="Request Map Task"></a>Request Map Task</h3><p>When the workers want to request map task, it should call <code>MapRequest</code> RPC. However, when there is no task available allocated to the worker, we should block the process in RPC call. You could see the following code to understand the detail.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MapTaskRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID <span class="type">int</span> <span class="comment">// the worker identifier</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MapTaskResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">  Task     MapTask</span><br><span class="line">  Shutdown <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> MapRequest(</span><br><span class="line">  request *MapTaskRequest,</span><br><span class="line">  response *MapTaskResponse) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">  condMap.L.Lock()</span><br><span class="line">  <span class="keyword">defer</span> condMap.L.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Here, we use `len(c.filenames)` to indicate whether there is</span></span><br><span class="line">  <span class="comment">// an available task for `Map` operation.</span></span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">len</span>(c.mapTask) == <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If all of the `Map` operation is finished, we should</span></span><br><span class="line">    <span class="comment">// set the `Shutdown` field to `true` and return.</span></span><br><span class="line">    <span class="keyword">if</span> c.allMapFinished &#123;</span><br><span class="line">      response.Shutdown = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    condMap.Wait()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We should return map task back to the `Map`</span></span><br><span class="line">  response.Task = c.mapTask[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Here, we should store the information of the worker</span></span><br><span class="line">  c.worker[request.ID].mapWorker.task = c.mapTask[<span class="number">0</span>]</span><br><span class="line">  c.worker[request.ID].mapWorker.status = processing</span><br><span class="line">  c.worker[request.ID].mapWorker.startTime = time.Now()</span><br><span class="line"></span><br><span class="line">  c.mapTask = c.mapTask[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Finish-Map-Task"><a href="#Finish-Map-Task" class="headerlink" title="Finish Map Task"></a>Finish Map Task</h3><p>When the workers finish the <code>Map</code> operation, it should call <code>MapFinish</code> to indicate the coordinator that “I have finished this task”. However, there are so many details we need to consider:</p><ol><li>There are some tasks running too much time which we will consider they are failed. If later the coordinator receives the <code>MapFinish</code> request, we should simply indicate the workers that they should be shutdown.</li><li>Because the workers may crash, we should never write the real name here. Instead workers should create temp file name. The coordinator should rename this in the RPC call. So we need to add a new field <code>Info</code> representing the mapping between the temp file name and the original file name.</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MapTaskRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  Info <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> MapFinish(</span><br><span class="line">  request *MapTaskRequest,</span><br><span class="line">  response *MapTaskResponse) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">  mutex.Lock()</span><br><span class="line">  <span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c.worker[request.ID].mapWorker.status == failed ||</span><br><span class="line">    c.allMapFinished &#123;</span><br><span class="line">    response.Shutdown = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c.worker[request.ID].mapWorker.status == processing &amp;&amp; !c.allMapFinished &#123;</span><br><span class="line"></span><br><span class="line">    c.mapTaskFinishedNum++</span><br><span class="line"></span><br><span class="line">    c.worker[request.ID].mapWorker.status = idle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> temp, original := <span class="keyword">range</span> request.Info &#123;</span><br><span class="line">      os.Rename(temp, original)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When all the `Map` operation is finished we should broadcast for</span></span><br><span class="line">    <span class="comment">// `Reduce` operation. Pay attention that `len(c.filenames) == 0`</span></span><br><span class="line">    <span class="keyword">if</span> c.mapTaskFinishedNum == c.mapTaskNum &#123;</span><br><span class="line">      c.allMapFinished = <span class="literal">true</span></span><br><span class="line">      condReduce.Broadcast()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The <code>ReduceRequest</code> and <code>ReduceFinish</code> functions are like <code>MapRequest</code> and <code>MapFinish</code>. I omit the detail here.</p><h2 id="Coordinator-Operations"><a href="#Coordinator-Operations" class="headerlink" title="Coordinator Operations"></a>Coordinator Operations</h2><p>There are two operations we need to consider for coordinator, one is that coordinator needs to check the liveness of the each worker for executing crash recovery. I define a goroutine <code>checkLiveness</code> here.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> checkLiveness() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">    done := c.Done()</span><br><span class="line">    <span class="keyword">if</span> done &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutex.Lock()</span><br><span class="line"></span><br><span class="line">    mapRestartTime := <span class="number">0</span></span><br><span class="line">    reduceRestartTime := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c.worker &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> c.worker[i].mapWorker.status == processing &amp;&amp; time.Since(c.worker[i].mapWorker.startTime).Seconds() &gt; <span class="number">10</span> &#123;</span><br><span class="line">        mapRestartTime++</span><br><span class="line">        c.mapTask = <span class="built_in">append</span>(c.mapTask, MapTask&#123;</span><br><span class="line">          ID:       c.worker[i].mapWorker.task.ID,</span><br><span class="line">          Filename: c.worker[i].mapWorker.task.Filename,</span><br><span class="line">        &#125;)</span><br><span class="line">        c.worker[i].mapWorker.status = failed</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> c.worker[i].reduceWorker.status == processing &amp;&amp; time.Since(c.worker[i].reduceWorker.startTime).Seconds() &gt; <span class="number">10</span> &#123;</span><br><span class="line">        reduceRestartTime++</span><br><span class="line">        c.reduceTask = <span class="built_in">append</span>(c.reduceTask, ReduceTask&#123;</span><br><span class="line">          MapTaskTotal: c.worker[i].reduceWorker.task.MapTaskTotal,</span><br><span class="line">          ID:           c.worker[i].reduceWorker.task.ID,</span><br><span class="line">        &#125;)</span><br><span class="line">        c.worker[i].reduceWorker.status = failed</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; mapRestartTime; i++ &#123;</span><br><span class="line">      condMap.Signal()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; reduceRestartTime; i++ &#123;</span><br><span class="line">      condReduce.Signal()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mutex.Unlock()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Worker-Operations"><a href="#Worker-Operations" class="headerlink" title="Worker Operations"></a>Worker Operations</h2><p>The entrypoint is the <code>Worker</code> function, we will start two goroutine in this function, one is used for handling <code>mapProcess</code> and the other is used for handling <code>reduceProcess</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue,</span><br><span class="line">  reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When there is a new worker, we should call RPC</span></span><br><span class="line">  <span class="comment">// `RegisterRPC`.</span></span><br><span class="line">  response := RegisterResponse&#123;&#125;</span><br><span class="line">  request := RegisterRequest&#123;&#125;</span><br><span class="line">  mutex = sync.Mutex&#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> !RegisterRPC(&amp;request, &amp;response) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> mapProcess(mapf, response.ID, response.NReduce)</span><br><span class="line">  <span class="keyword">go</span> reduceProcess(reducef, response.ID, response.NReduce)</span><br><span class="line"></span><br><span class="line">  wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mapProcess</code> goroutine will handle the following things:</p><ol><li>Firstly uses <code>MapRequestRPC</code> to request one job from coordinator, and the most two important things got from coordinator is the <code>MapTask</code> structure.</li><li>We need to maintain the mapping between the temp file name and the original filename.</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapProcess</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue, id <span class="type">int</span>, nReduce <span class="type">int</span>) &#123;</span><br><span class="line">  <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">    request := MapTaskRequest&#123;ID: id&#125;</span><br><span class="line">    response := MapTaskResponse&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !MapRequestRPC(&amp;request, &amp;response) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the coordinator is terminated, we should terminate</span></span><br><span class="line">    <span class="comment">// the `mapProcess`</span></span><br><span class="line">    <span class="keyword">if</span> response.Shutdown &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tempToOriginal := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    intermediate := []KeyValue&#123;&#125;</span><br><span class="line">    filename := response.Task.Filename</span><br><span class="line">    file, _ := os.Open(filename)</span><br><span class="line">    content, _ := io.ReadAll(file)</span><br><span class="line">    file.Close()</span><br><span class="line">    kva := mapf(filename, <span class="type">string</span>(content))</span><br><span class="line">    intermediate = <span class="built_in">append</span>(intermediate, kva...)</span><br><span class="line"></span><br><span class="line">    outputNamePrefix := fmt.Sprintf(<span class="string">&quot;mr-%d-&quot;</span>, response.Task.ID)</span><br><span class="line"></span><br><span class="line">    outputFile := []*os.File&#123;&#125;</span><br><span class="line">    enc := []*json.Encoder&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= nReduce; i++ &#123;</span><br><span class="line">      outputName := fmt.Sprintf(<span class="string">&quot;%s%d&quot;</span>, outputNamePrefix, i)</span><br><span class="line">      tempFile, _ := os.CreateTemp(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;tempfile-&quot;</span>)</span><br><span class="line">      tempToOriginal[tempFile.Name()] = outputName</span><br><span class="line"></span><br><span class="line">      encTemp := json.NewEncoder(tempFile)</span><br><span class="line">      outputFile = <span class="built_in">append</span>(outputFile, tempFile)</span><br><span class="line">      enc = <span class="built_in">append</span>(enc, encTemp)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, kv := <span class="keyword">range</span> intermediate &#123;</span><br><span class="line">      reduceNum := ihash(kv.Key) % nReduce</span><br><span class="line">      enc[reduceNum].Encode(kv)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, file := <span class="keyword">range</span> outputFile &#123;</span><br><span class="line">      file.Close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.Info = tempToOriginal</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !MapFinishRPC(&amp;request, &amp;response) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> tempToOriginal &#123;</span><br><span class="line">      <span class="built_in">delete</span>(tempToOriginal, k)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reduceProcess</code> is just the same as <code>mapProcess</code>. Actually, from my perspective, there is nothing different.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reduceProcess</span><span class="params">(reducef <span class="keyword">func</span>(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>, id <span class="type">int</span>, nReduce <span class="type">int</span>) &#123;</span><br><span class="line">  <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">    request := ReduceTaskRequest&#123;ID: id&#125;</span><br><span class="line">    response := ReduceTaskResponse&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !ReduceRequestRPC(&amp;request, &amp;response) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.Shutdown &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    intermediate := []KeyValue&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= response.Task.MapTaskTotal; i++ &#123;</span><br><span class="line">      inputName := fmt.Sprintf(<span class="string">&quot;mr-%d-%d&quot;</span>, i, response.Task.ID)</span><br><span class="line">      file, _ := os.Open(inputName)</span><br><span class="line">      dec := json.NewDecoder(file)</span><br><span class="line">      <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> temp KeyValue</span><br><span class="line">        <span class="keyword">if</span> err := dec.Decode(&amp;temp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        intermediate = <span class="built_in">append</span>(intermediate, temp)</span><br><span class="line">      &#125;</span><br><span class="line">      file.Close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort.Sort(ByKey(intermediate))</span><br><span class="line"></span><br><span class="line">    temporaryToOriginal := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">    outputName := fmt.Sprintf(<span class="string">&quot;mr-out-%d&quot;</span>, response.Task.ID)</span><br><span class="line">    tempFile, _ := os.CreateTemp(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;tempfile-&quot;</span>)</span><br><span class="line">    temporaryToOriginal[tempFile.Name()] = outputName</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(intermediate) &#123;</span><br><span class="line">      j := i + <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> j &lt; <span class="built_in">len</span>(intermediate) &amp;&amp; intermediate[j].Key == intermediate[i].Key &#123;</span><br><span class="line">        j++</span><br><span class="line">      &#125;</span><br><span class="line">      values := []<span class="type">string</span>&#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">        values = <span class="built_in">append</span>(values, intermediate[k].Value)</span><br><span class="line">      &#125;</span><br><span class="line">      output := reducef(intermediate[i].Key, values)</span><br><span class="line">      fmt.Fprintf(tempFile, <span class="string">&quot;%v %v\n&quot;</span>, intermediate[i].Key, output)</span><br><span class="line">      i = j</span><br><span class="line">    &#125;</span><br><span class="line">    tempFile.Close()</span><br><span class="line">    request.Info = temporaryToOriginal</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !ReduceFinishRPC(&amp;request, &amp;response) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;This is my record for finish MIT 6.824(spring 2022) first lab &lt;a</summary>
        
      
    
    
    
    <category term="MIT6.824" scheme="https://luolibrary.com/categories/MIT6-824/"/>
    
    
    <category term="技术" scheme="https://luolibrary.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="https://luolibrary.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 8-9</title>
    <link href="https://luolibrary.com/2024/07/28/GSoC-Week-8-9/"/>
    <id>https://luolibrary.com/2024/07/28/GSoC-Week-8-9/</id>
    <published>2024-07-28T15:31:46.000Z</published>
    <updated>2024-07-28T15:31:59.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>In these two weeks, I mainly focus on solving the reviews. After I have sent the <a href="https://lore.kernel.org/git/ZpPEdmUN1Z5tqbK3@ArchLinux/">Patch v11</a> to the mailing list. Karthik suggests that instead of using <code>ref_checkee</code> and <code>sub_ref_checkee</code>, we may use the following data structure to provide more extensibility here.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsck_refs_info</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *refname;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; reftable;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; files;</span><br><span class="line">       &#125; u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So in <a href="https://lore.kernel.org/git/ZpuCg1GL1YE_sJBP@ArchLinux/">patch v12</a>, I implement the above data structure.</p><p>However, Patrick has a different opinion about this. Patrick thinks this is too complicated. We should make thing simple here. Instead of using a union to represent the options, why we not just use a flat structure here. So I just use the following data structure:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fsck_refs_info</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s simple and we reserve the extensibility here. The code is under review in the <a href="https://github.com/shejialuo/git/pull/11">github</a>. I have already solve the review from Karthik. However, due to the reason that Patrick has just come back to Office. I am waiting for the reviews from Patrick. When everything is OK, I will send the Patch v13 to the mailing list.</p><p>What a long journey!</p><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>Continue to handle the reviews.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;In these two</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 7</title>
    <link href="https://luolibrary.com/2024/07/16/GSoC-Week-7/"/>
    <id>https://luolibrary.com/2024/07/16/GSoC-Week-7/</id>
    <published>2024-07-16T13:45:49.000Z</published>
    <updated>2024-07-16T13:46:06.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>In this week, I still put my effort on handling reviews.</p><ul><li><a href="https://lore.kernel.org/git/Zo0sQCBqyxX8dJ-f@ArchLinux/">Patch v9</a>: In version 8, Karthik thinks that instead of renaming <code>skiplist</code> to <code>oid_skiplist</code>, we’d better rename <code>skiptlist</code> to <code>skip_oids</code>. So, I simply apply this idea. And I have made a mistake in version 8, I use the <code>static</code> for a string buf, but I forget to use <code>strbuf_reset</code> for each function call. So I add this statement here. However, Eric thinks that using <code>static</code> variable is a very bad idea, because <code>fsck_refs_error_function</code> should not be called frequently. The design will make the code harder to “libify”. This is one thing I have learned. And Justin has provided some reviews about the commit sequence and commit messages, need to make it clearer.</li><li><a href="https://lore.kernel.org/git/Zo6eJi8BePrQxTQV@ArchLinux/">Patch v10</a>: This patch solves the problem of version 9. But there are some new reviews coming from Junio. The first problem is that we should not name the report interface <code>vfsck_report</code> but “fsck_vreport”, and Junio feels that the current commit sequence is not so clear, need to adjust.</li></ul><p>However, In patch v10, the most important question Junio asks is about the functionality <code>fsck_refs_error_function</code>. The declaration of this function in patch v10 is shown below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fsck_refs_error_function</span><span class="params">(<span class="keyword">struct</span> fsck_options *options UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="keyword">struct</span> object_id *oid,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> object_type object_type UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">char</span> *checked_ref_name,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> fsck_msg_type msg_type,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> fsck_msg_id msg_id UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">char</span> *message )</span>;</span><br></pre></td></tr></table></figure><p>Junio thinks above declaration only handles the problem of the single ref such as <code>refs/heads/main</code>. What about the packed-refs?</p><blockquote><p>The error reporting function for refs consistency check was still about reporting a problem for a single ref.  I am wondering how consistency violations that are not about a single ref should be handled.  For example, if <code>refs/packed-backend.c:packed_fsck()</code> finds that the file is not sorted properly or has some unparsable garbage in it, it is not something you can report as “refs&#x2F;heads&#x2F;main is broken”, but those who are interested in seeing the “reference database consistency” verified, it is very much what they want the tool to notice.</p></blockquote><p>So I need to find a way to handle this. So I decide to look at the spec of the packed-refs and reftable refs. And I finally find a way to do this.</p><p>After some investigations, there are the following situations where we should handle when checking ref consistency.</p><ol><li>When checking loose refs and reflofs, we only need the <code>checkee</code> information, because they are standalone files.</li><li>When checking packed-refs, we should check the packed-refs itself, for example whether it is sorted or there are some garbage trailing contents. However, we should also check each ref (<code>sub_checkee</code>) in the file.</li><li>When checking reftable refs, we need to check the binary file, we could still use the idea like 2 case.</li></ol><p>By the above statements, I change the <code>fsck_refs_error_function</code> shown as below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fsck_refs_error_function</span><span class="params">(<span class="keyword">struct</span> fsck_options *options UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="keyword">struct</span> object_id *oid,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> object_type object_type UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">char</span> *ref_checkee,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">char</span> *sub_ref_checkee,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> fsck_msg_type msg_type,</span></span><br><span class="line"><span class="params">                             <span class="keyword">enum</span> fsck_msg_id msg_id UNUSED,</span></span><br><span class="line"><span class="params">                             <span class="type">const</span> <span class="type">char</span> *message)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">strbuf</span> <span class="title">sb</span> =</span> STRBUF_INIT;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sub_ref_checkee)</span><br><span class="line">        strbuf_addf(&amp;sb, <span class="string">&quot;%s.%s&quot;</span>, ref_checkee, sub_ref_checkee);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        strbuf_addstr(&amp;sb, ref_checkee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oid)</span><br><span class="line">        strbuf_addf(&amp;sb, <span class="string">&quot; -&gt; (%s)&quot;</span>, oid_to_hex(oid));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (msg_type == FSCK_WARN)</span><br><span class="line">        warning(<span class="string">&quot;%s: %s&quot;</span>, sb.buf, message);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ret = error(<span class="string">&quot;%s: %s&quot;</span>, sb.buf, message);</span><br><span class="line"></span><br><span class="line">    strbuf_release(&amp;sb);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It could provide the following report messages:</p><ol><li>“ref_checkee”: “fsck error name”: “user message”.</li><li>“ref_checkee.sub_ref_checkee”: “fsck error name”: “user message”.</li><li>“ref_checkee -&gt; (oid hex)”: “fsck error name”: “user message”.</li><li>“ref_checkee.sub_ref_checkee -&gt; (oid hex)”: “fsck error name”: “user message”.</li></ol><p>This is what I done in <a href="https://lore.kernel.org/git/ZpPEdmUN1Z5tqbK3@ArchLinux/">patch v11</a>.</p><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>It’s important for me to set up the infra of consistency check for refs. Because everything will be built upon that. I think I will continue to handle the reviews.</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>The recent challenges I’ve encountered mainly stem from two aspects. Over the past two weeks, I’ve felt mentally exhausted because I haven’t received much positive feedback. Since May 30th, my first patch is still under review. Sometimes, I can’t help but feel the pressure from my peers. Seeing other GSoC participants successfully merge several patches does indeed make me feel pressured. Therefore, I realize that I must learn how to adjust my mindset during prolonged review periods.</p><p>Secondly, there’s the issue raised by Junio regarding how to improve the “fsck_refs_error_function.” Junio actually brought this up in the initial version, but I subconsciously ignored it. Although I am responsible for building the infrastructure, I have limited knowledge about packed-refs and reftable refs. I thought it would be very difficult for me to design a perfect function. However, in the end, I had to face this problem head-on. Sometimes, when I encounter difficult issues, I tend to avoid them subconsciously. Despite this, I eventually found a solution.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;In this week,</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 6</title>
    <link href="https://luolibrary.com/2024/07/08/GSoC-Week-6/"/>
    <id>https://luolibrary.com/2024/07/08/GSoC-Week-6/</id>
    <published>2024-07-08T13:38:41.000Z</published>
    <updated>2024-07-16T13:28:10.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>In this week, I mainly focus on solving the reviews.</p><ul><li><a href="https://lore.kernel.org/git/ZoLHtmOKTfxMSxvw@ArchLinux/">Patch v6</a>: In this version, I decide to reduce the complexity. However, I still misunderstood what Junio said, I still explicitly extracts two options <code>fsck_refs_options</code> and <code>fsck_objects_options</code> here. In my view, I suppose we could make the code more clean. However, Junio has commented as the following:<blockquote><p>Just like premature optimization is bad, premature factoring and over-modularization is bad.</p></blockquote></li><li><a href="https://lore.kernel.org/git/ZoVX6sn2C9VIeZ38@ArchLinux/">Patch v7</a>: In this version, I just add a new ref-related field <code>verbose_refs</code> into the <code>fsck_options</code> without any over-modularization.</li><li><a href="https://lore.kernel.org/git/ZovqY4vQnQBAs7PH@ArchLinux/">Patch v8</a>: Some commit messages in Patch v7 are not clear which makes the reviewer confused. Enhance the commit messages in this version.</li></ul><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>I guess this series should be OK. After setting up the infrastructure. I decide to add packed-refs consistency checks with the following steps:</p><ol><li>Get a list of checks that packed-refs should checks, discussing with my mentors and the community.</li><li>Implement the code.</li></ol><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>Since becoming a full-time employee, time has become a bit tight. I will manage my time more efficiently.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;In this week,</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 4-5</title>
    <link href="https://luolibrary.com/2024/06/30/GSoC-Week-4-5/"/>
    <id>https://luolibrary.com/2024/06/30/GSoC-Week-4-5/</id>
    <published>2024-06-30T15:50:51.000Z</published>
    <updated>2024-07-08T13:49:20.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Personal-Life"><a href="#Personal-Life" class="headerlink" title="Personal Life"></a>Personal Life</h2><p>Due to the need to help prepare for my master’s graduation work and to move to Shanghai to start my job at NVIDIA on July 1st, I have divided the GSoC records into two weeks.</p><h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>In these two weeks, I mainly work on three tasks:</p><ul><li><a href="https://lore.kernel.org/git/ZnKKy52QFO2UhqM6@ArchLinux">Patch v4</a>: In this version, I correct the previous implementation that attempted to use pointer casting and adopt a composition strategy to design the data structure.</li><li><a href="https://lore.kernel.org/git/Zn4xeoqhCeBCSNvg@ArchLinux">Patch v5</a>: In this version, Junio suggest that I should reuse the existing report code. However, I overcomplicate the issue by setting up two parallel data structures, which increases the complexity of the problem.</li><li>Completed the GSoC midterm evaluation. My mentors have given me some really useful advice, especially.<blockquote><p>Find the balance between building something that can be easily extended in the future vs. something that is specific to the task at hand.</p></blockquote></li></ul><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>The next task is still based on the composition structure of the data. Although Junio provided a data structure using a union, I still find it too complex. I have always wanted my implementation to be extensible, which has slightly deviated from the task I was supposed to do.</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>I feel that the biggest challenge over these two weeks has been understanding the reviews. Every time I submit changes based on a review, I tend to veer off course a bit. I feel that the reviewers’ comments are aimed at addressing specific issues, while I always strive for a perfect implementation, which has led to a lot of unnecessary work and made the code more complex.</p><p>How to balance this is something I have decided to think about carefully.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;Personal-Life&quot;&gt;&lt;a href=&quot;#Personal-Life&quot; class=&quot;headerlink&quot; title=&quot;Personal Life&quot;&gt;&lt;/a&gt;Personal Life&lt;/h2&gt;&lt;p&gt;Due to the need to help</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 3</title>
    <link href="https://luolibrary.com/2024/06/17/GSoC-Week-3/"/>
    <id>https://luolibrary.com/2024/06/17/GSoC-Week-3/</id>
    <published>2024-06-17T05:54:45.000Z</published>
    <updated>2024-06-17T05:54:57.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>This week, I focus on handling the reviews from my mentors and Junio. My mentors have put some comments on the <a href="https://github.com/shejialuo/git/pull/2">PR</a> before I send the patch to the mailing list.</p><h3 id="Reviews-From-Junio"><a href="#Reviews-From-Junio" class="headerlink" title="Reviews From Junio"></a>Reviews From Junio</h3><p>There are many important reviews from Junio. And we have discussed some issues:</p><ol><li>The dangling symref should not be reported by <code>git-fsck(1)</code>. There is a common situation where people would use dangling symref to create the pointee ref. Like Junio said:</li></ol>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git symbolic-ref refs/heads/maint refs/heads/maint-2.46</span><br><span class="line">git branch maint v2.46.0</span><br></pre></td></tr></table></figure><ol start="2"><li>We should change <code>fsck_files_symref</code> to <code>fsck_symref_target</code>. Because we are checking the target not the symref.</li><li>The use of <code>unsigned int *trailing</code> is not proper which will lose a lot of information for the caller.</li><li>The current implementation should check the symbolic link “escape” situation.</li><li>Some error information will cause misleading.</li></ol><h3 id="The-Problems-I-Found"><a href="#The-Problems-I-Found" class="headerlink" title="The Problems I Found"></a>The Problems I Found</h3><p>However, I have still found some problems in the current implementation:</p><ol><li>When checking symref target, the <code>referent</code> buf could be end with <code>&#39;\n&#39;</code>. If we simply pass the <code>referent</code> to <code>check_refname_format</code> function, we will get incorrect behavior.</li><li>The current implementation totally ignores the absolute symbolic link situation.</li><li>The current tests lack testing for symbolic links.I wanna make sure that the symbolic link check will work especially in Windows. I am a little worry about the compatibility.</li></ol><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>So in order to enhance this patch, I will do the following things:</p><ol><li>Change the defined fsck messages and drop the <code>danglingSymref</code>.</li><li>Enhance the checks for symbolic link and add the corresponding tests.</li></ol><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>This week, I spent most of my time addressing reviews. The biggest challenge I encountered was how to reasonably explain my intentions and design ideas when facing others’ reviews. Additionally, understanding the principles and motivations behind the reviews was also challenging. Rather than calling it a challenge, I would say it was a very interesting experience.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;This week, I</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 2</title>
    <link href="https://luolibrary.com/2024/06/10/GSoC-Week-2/"/>
    <id>https://luolibrary.com/2024/06/10/GSoC-Week-2/</id>
    <published>2024-06-10T06:01:39.000Z</published>
    <updated>2024-06-10T06:02:00.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>This is the second week of writing code. I spend most of my time reading the <code>git-fsck(1)</code> source code and enhance my first-version patch.</p><h3 id="Understand-Fsck-Message"><a href="#Understand-Fsck-Message" class="headerlink" title="Understand Fsck Message"></a>Understand Fsck Message</h3><p>As Junior has commented:</p><blockquote><p>How well does this interact with the fsck error levels (aka fsck_msg_type), by the way?  It should be made to work well if the current design does not.</p></blockquote><p>So the first thing I do in this week is to understand “fsck message”. It takes me a lot of time here.</p><h3 id="Implement-the-Code"><a href="#Implement-the-Code" class="headerlink" title="Implement the Code"></a>Implement the Code</h3><p>After understand how fsck messages works, I continue to start coding. I mainly do the following things like this <a href="https://github.com/shejialuo/git/pull/2">PR</a> shows:</p><ul><li>add refs check interfaces to interface with fsck error levels.</li><li>set up ref consistency check infrastructure.</li><li>add verify subcommand for builtin <code>git-refs</code>.</li><li>add git-refs verify child process for <code>git-fsck(1)</code>.</li><li>add unified interface for refs scanning for files backend.</li><li>add ref name check for files backend.</li><li>add ref content check for files backend.</li></ul><p>However, due to the <code>git-refs</code> has not been merged into the <code>next</code>. I’ll send the patches to the mailing list until everything is OK.</p><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>I need to understand the <code>git-worktree</code>. The current implementation totally ignores worktree.</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>This week, I have encountered numerous challenges. The most difficult part for me has been designing the code.</p><p>In the process of integrating the fsck message into the reference consistency check, I encounter numerous design issues. Should I add two new fields directly to <code>fsck_options</code>, or should I create a new structure and reuse existing functions through polymorphism? I ponder this for a long time and ultimately choose the latter to ensure semantic clarity.</p><p>Additionally, I need to name the new fsck messages, which also takes considerable thought. Since I have to implement a new feature myself, coding is not the most complex part; rather, it is the design. How to design it in a way that makes both the semantics and the code clearer takes up a significant amount of my time.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;This is the</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC Week 1</title>
    <link href="https://luolibrary.com/2024/06/02/GSoC-Week-1/"/>
    <id>https://luolibrary.com/2024/06/02/GSoC-Week-1/</id>
    <published>2024-06-02T08:51:10.000Z</published>
    <updated>2024-06-17T05:27:24.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-I-Have-Done"><a href="#What-I-Have-Done" class="headerlink" title="What I Have Done"></a>What I Have Done</h2><p>This is the first week of writing code. I spent most of my time building the infrastructure for the ref consistency check and implementing some consistency checks for the files backend.</p><h3 id="Set-Up-the-Infrastructure"><a href="#Set-Up-the-Infrastructure" class="headerlink" title="Set Up the Infrastructure"></a>Set Up the Infrastructure</h3><p>I reuse the polymorphism provided by <code>ref_storage_be</code> and add a new interface called <code>fsck_fn</code> to facilitate consistency checks for refs as the <a href="https://lore.kernel.org/git/20240530122753.1114818-1-shejialuo@gmail.com/T/#m63c0d98020a814954f26c54c65bf04830bb0862a">refs: setup ref consistency check infrastructure</a> shows. Additionally, I implement dummy methods for different backends to ensure compatibility and extensibility.</p><h3 id="Name-and-Content-Check-For-Files-Backend"><a href="#Name-and-Content-Check-For-Files-Backend" class="headerlink" title="Name and Content Check For Files Backend"></a>Name and Content Check For Files Backend</h3><p>After setting up the infrastructure, I decide to add some basic checks for the file backend. We may need to parse every file located in a specific directory and perform checks on its content or file name. Therefore, I design the following workflow:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iter = dir_iterator_begin(dir, 0);</span><br><span class="line">while (dir_iterator_advance(iter) == ITER_OK)</span><br><span class="line">  if (IS_FILE(iter))</span><br><span class="line">    for (fn = fns; fn; fn++)</span><br><span class="line">      fn(iter)</span><br></pre></td></tr></table></figure><p>And I have written the following code to achieve above pseudo code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*files_fsck_refs_fn)</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *refs_check_dir,</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> dir_iterator *iter)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">files_fsck_refs</span><span class="params">(<span class="keyword">struct</span> ref_store *ref_store,</span></span><br><span class="line"><span class="params">        <span class="type">const</span> <span class="type">char</span>* refs_check_dir,</span></span><br><span class="line"><span class="params">        files_fsck_refs_fn *fsck_refs_fns)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">while</span> ((iter_status = dir_iterator_advance(iter)) == ITER_OK) &#123;</span><br><span class="line">    error(<span class="string">&quot;test: %s&quot;</span>, iter-&gt;relative_path);</span><br><span class="line">    <span class="keyword">if</span> (S_ISDIR(iter-&gt;st.st_mode)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (S_ISREG(iter-&gt;st.st_mode)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (files_fsck_refs_fn *fsck_refs_fn = fsck_refs_fns;</span><br><span class="line">          *fsck_refs_fn; fsck_refs_fn++) &#123;</span><br><span class="line">        ret |= (*fsck_refs_fn)(refs_check_dir, iter);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      error(_(<span class="string">&quot;unexpected file type for &#x27;%s&#x27;&quot;</span>), iter-&gt;basename);</span><br><span class="line">      ret = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For name check and content check, we should just following the prototype of <code>files_fsck_refs_fn</code>. Below shows the detail about these two functionalities.</p><ul><li>Name check: use the existing API <code>check_refname_format</code> to check the reference name.</li><li>Content check: check the following two cases.<ul><li>check whether the ref content length is valid and the last character is a newline.</li><li>check whether the content is be range of <code>[0-9a-f]</code>.</li></ul></li></ul><h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><p>There are many limitations for the current implementation:</p><ul><li>The semantic of <code>fsck_fn</code> should be presented either in code using comments or in commit message. As <a href="https://github.com/gitster">Junio</a> said:<blockquote><p>What is the extra blank line doing there?  It makes reader wonder why the .fsck member is somehow very special and different from others.  Is there a valid reason to single it out (and no, “yes this is special because I invented it” does not count as a valid reason)? The same comment applies to a few other places in this patch.</p></blockquote></li><li>The current implementation totally ignores the symbolic ref such as <code>ref: refs/heads/main</code>.<blockquote><p>In any case, the two checks are good ONLY for regular refs and not for symbolic refs.  The users are free to create symbolic refs next to their branches, e.g. here is a way to say, “among the maintenance tracks maint-2.30, maint-2.31, … maint-2.44, maint-2.45, what I consider the primary maintenance track is currently maint-2.45”.</p></blockquote></li><li>The current implementation should consider the real symbolic file.<blockquote><p>The caller also needs to be prepared to find a real symbolic link that is used as a symbolic ref.</p></blockquote></li><li>The content check is not proper.<blockquote><p>I do not think it is a good idea to suddenly redefine what a valid way to write object names in a loose ref file after ~20 years. it should be at most FSCK_WARN when it does not look like what <em>we</em> wrote.</p></blockquote></li><li>The current implementation does not interact with the fsck error levels at all.<blockquote><p>How well does this interact with the fsck error levels (aka fsck_msg_type), by the way?  It should be made to work well if the current design does not.</p></blockquote></li></ul><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>The next plan is very clear now.</p><ul><li>Really understand what <code>git-fsck</code> does to know whether we should port some functions to ref part and also to find a way to interact with teh fsck error levels.</li><li>Enhance the current implementation to support regular file containing symbolic ref and symbolic link file.</li><li>Understand how <code>git-worktree</code> works and incorporate the worktree like <code>git-fsck</code>.</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;What-I-Have-Done&quot;&gt;&lt;a href=&quot;#What-I-Have-Done&quot; class=&quot;headerlink&quot; title=&quot;What I Have Done&quot;&gt;&lt;/a&gt;What I Have Done&lt;/h2&gt;&lt;p&gt;This is the</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>GSoC-Community Bonding Period</title>
    <link href="https://luolibrary.com/2024/05/27/GSoC-Community-Bonding-Period/"/>
    <id>https://luolibrary.com/2024/05/27/GSoC-Community-Bonding-Period/</id>
    <published>2024-05-27T07:37:51.000Z</published>
    <updated>2024-05-27T07:38:26.705Z</updated>
    
    <content type="html"><![CDATA[<p>During the community bonding period, I engaged in various activities to familiarize myself with my mentors, the community, and the git codebase. I had video conferences with each of my two mentors, where we discussed not only how to quickly set up a basic infrastructure for reference consistency checks but also talked about our respective careers and technical exchanges. Additionally, we scheduled bi-weekly video meetings for ongoing synchronization.</p><p>At the same time, all mentors and contributors agreed to an online meeting on June 7th, allowing us to further familiarize ourselves with the community.</p><h2 id="Setup-the-Mutt-to-Improve-Productivity"><a href="#Setup-the-Mutt-to-Improve-Productivity" class="headerlink" title="Setup the Mutt to Improve Productivity"></a>Setup the Mutt to Improve Productivity</h2><p>To enhance the efficiency of handling emails in the community later on, I plan to implement the use of mutt on ArchLinux before the official coding begins, and I have written a blog post called <a href="https://luolibrary.com/2024/05/12/Use-Mutt-in-ArchLinux/">Use Mutt in ArchLinux</a> documenting the configuration process.</p><h2 id="Infrastructure-Implementation"><a href="#Infrastructure-Implementation" class="headerlink" title="Infrastructure Implementation"></a>Infrastructure Implementation</h2><p>Before the official GSoC coding period begins, I was ready to set up the architecture for reference consistency checks as envisioned in the proposal. The core idea is to add a callback to <code>ref_storage_be</code>, then add the functionality to check if the ref name is correct for the file backend, and add code in the <code>fsck.c</code> file for testing.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ref_storage_be</span> &#123;</span></span><br><span class="line">  ...</span><br><span class="line">  check_refs_fn *check_refs;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>My mentors, Patrick and Karthik, have already commented on the corresponding <a href="https://github.com/shejialuo/git/commit/d4c33868502f7a74066cc8bce9c78941b68f58cb">commit</a>, with the main issues focusing on the following aspects:</p><ol><li>The current commit should be split; the first commit should focus on the implementation of the infrastructure, and then the second commit should add the name check for the file backend.</li><li>Do not use refs code to enumerate through the refs here. The reason is that this function would hide broken references from us. Use <code>dir-iterator.h</code> to check <code>refs/</code>.</li><li>Suggestions for some naming changes.</li><li>The need to also check the refs of the worktree.</li></ol><h2 id="Next-Plan"><a href="#Next-Plan" class="headerlink" title="Next Plan"></a>Next Plan</h2><p>I have now essentially completed the coding for the infrastructure. The subsequent work mainly involves addressing the comments from my two mentors on the current commit, then cleaning up the code, and reviewing the code through PRs in my own <a href="https://github.com/shejialuo/git/">repository</a>.</p><p>Secondly, I will maintain an email in the community to organize all updated blogs, making it convenient for the community to promptly follow my updates and provide me with feedback.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;During the community bonding period, I engaged in various activities to familiarize myself with my mentors, the community, and the git</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>Use Mutt in ArchLinux</title>
    <link href="https://luolibrary.com/2024/05/12/Use-Mutt-in-ArchLinux/"/>
    <id>https://luolibrary.com/2024/05/12/Use-Mutt-in-ArchLinux/</id>
    <published>2024-05-12T15:00:17.000Z</published>
    <updated>2024-05-12T15:00:34.202Z</updated>
    
    <content type="html"><![CDATA[<p>I successfully configured the Mutt email client a long time ago. Many open-source communities continue to use mailing lists as their primary communication tool, making a plain text email client essential. Mutt is an excellent choice for this purpose. I wrote this blog post to deepen my understanding of Mutt’s processes and to share why it remains relevant and useful in today’s digital communication landscape.</p><p>The following contents are cited from Mutt ArchWiki:</p><blockquote><p>Mutt focuses primarily on being a Mail User Agent (MUA), and was originally written to view mail. Later implementations (added for retrieval, sending, and filtering mail) are simplistic compared to other mail applications and, as such, users may wish to use external applications to extend Mutt’s capabilities.</p><p>Nevertheless, the Arch Linux mutt package is compiled with IMAP, POP3 and SMTP support, removing the necessity for external applications.</p></blockquote><p>Although the ArchLinux mutt package includes SMTP protocol functionality, which could simplify email management, I have decided to stick with the traditional way of using Mutt. This approach allows me to fully understand and control the email handling process, ensuring that I can customize and optimize it according to my specific needs.</p><p>I decide to use the following softwares in Arch Linux (It should work in any UNIX-like environment).</p><ul><li><a href="https://www.fetchmail.info/">fetchmail</a>. It is a mail-retrieval and forwarding utility; it fetches mail from remote mail servers and forwards it to your local machine’s delivery system.</li><li><a href="https://github.com/BuGlessRB/procmail">procmail</a>. A program for filtering, sorting and storing email.</li><li><a href="https://github.com/muttmua/mutt">Mutt</a>. The MUA.</li><li><a href="https://marlam.de/msmtp/">msmtp</a>. A simple SMTP client.</li></ul><h2 id="The-Usage-of-fetchmail"><a href="#The-Usage-of-fetchmail" class="headerlink" title="The Usage of fetchmail"></a>The Usage of fetchmail</h2><p>It’s not hard to use <code>fetchmail</code>. You should carefully read its <a href="https://www.fetchmail.info/fetchmail-man.html">manual</a>. It will explain everything you need.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#  QQMail (FoxMail)</span><br><span class="line">poll imap.qq.com protocol IMAP user &quot;392499367@qq.com&quot; password &quot;&quot; ssl keep</span><br><span class="line">mimedecode</span><br><span class="line">mda &quot;/usr/bin/procmail -f %F -d %T&quot;</span><br><span class="line"></span><br><span class="line"># GMail</span><br><span class="line">poll imap.gmail.com protocol IMAP user &quot;shejialuo@gmail.com&quot; password &quot;&quot; ssl keep</span><br><span class="line">mimedecode</span><br><span class="line">mda &quot;/usr/bin/procmail -f %F -d %T&quot;</span><br></pre></td></tr></table></figure><p>The <code>fetchmail</code> will eventually call <code>procmail</code> for directing the emails.</p><h2 id="The-Usage-of-procmail"><a href="#The-Usage-of-procmail" class="headerlink" title="The Usage of procmail"></a>The Usage of procmail</h2><p>The functionality of <code>procmail</code> is very powerful. However, power sometimes can cause a lot of trouble. So, I only use <code>procmail</code> to put the received email into the corresponding inbox.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MAILDIR=$HOME</span><br><span class="line">VERBOSE=off</span><br><span class="line">LOGFILE=/tmp/procmaillog</span><br><span class="line"></span><br><span class="line">:0</span><br><span class="line">* ^TO*392499367@qq.com*</span><br><span class="line">Mail/QQMail/inbox</span><br><span class="line"></span><br><span class="line">:0</span><br><span class="line">* ^TO*shejialuo@foxmail.com*</span><br><span class="line">Mail/QQMail/inbox</span><br><span class="line"></span><br><span class="line">:0</span><br><span class="line">* ^TO*shejialuo@gmail.com*</span><br><span class="line">Mail/GMail/inbox</span><br><span class="line"></span><br><span class="line">:0：</span><br><span class="line">Mail/inbox</span><br></pre></td></tr></table></figure><p>The configuration described above is straightforward. It efficiently examines both the To and Cc fields of an email and directs the message to the appropriate folder accordingly.</p><h2 id="The-Usage-of-mstmp"><a href="#The-Usage-of-mstmp" class="headerlink" title="The Usage of mstmp"></a>The Usage of mstmp</h2><p>It’s still not so hard to configure the <code>mstmp</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># QQMail (FoxMail)</span><br><span class="line">account QQMail</span><br><span class="line">    auth login</span><br><span class="line">    host smtp.qq.com</span><br><span class="line">    port 587</span><br><span class="line">    from 392499367@qq.com</span><br><span class="line">    user 392499367@qq.com</span><br><span class="line">    password &quot;&quot;</span><br><span class="line">    tls on</span><br><span class="line">    tls_certcheck off</span><br><span class="line"></span><br><span class="line"># GMail</span><br><span class="line">account GMail</span><br><span class="line">    auth login</span><br><span class="line">    host smtp.gmail.com</span><br><span class="line">    port 587</span><br><span class="line">    from shejialuo@gmail.com</span><br><span class="line">    user shejialuo@gmail.com</span><br><span class="line">    password &quot;&quot;</span><br><span class="line">    tls on</span><br><span class="line">    tls_certcheck on</span><br><span class="line"></span><br><span class="line">logfile /tmp/msmtp.log</span><br></pre></td></tr></table></figure><h2 id="The-Usage-of-Mutt"><a href="#The-Usage-of-Mutt" class="headerlink" title="The Usage of Mutt"></a>The Usage of Mutt</h2><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>I use the <a href="https://github.com/dracula/mutt">dracula theme</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dracular color theme</span><br><span class="line">source ~/.config/mutt/dracula.muttrc</span><br></pre></td></tr></table></figure><h3 id="Basic-Configuration"><a href="#Basic-Configuration" class="headerlink" title="Basic Configuration"></a>Basic Configuration</h3><p>The configuration could be very different for different people. I simply put my configuration below. You’d better use the <code>man muttrc</code> to change the configuration for whatever you like.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># The default directory to save attach_save_dirachments from the &quot;attachment&quot; menu.</span><br><span class="line">set attach_save_dir = ~/.config/mutt/attachments</span><br><span class="line"></span><br><span class="line"># When this variable is set, mutt will beep when an error occurs.</span><br><span class="line">set beep = no</span><br><span class="line"></span><br><span class="line"># Character set your terminal uses to display and enter textual data</span><br><span class="line">set charset = &quot;utf-8&quot;</span><br><span class="line"></span><br><span class="line"># This option allows you to edit the header of your outgoing messages along with</span><br><span class="line"># the body of your message.</span><br><span class="line">set edit_headers=yes</span><br><span class="line"></span><br><span class="line"># This variable specifies which editor is used by mutt.</span><br><span class="line">set editor=&quot;vim&quot;</span><br><span class="line"></span><br><span class="line"># Controls whether or not a copy of the messages you are replying to is</span><br><span class="line"># included in your reply.</span><br><span class="line">set include = yes</span><br><span class="line"></span><br><span class="line"># When set, mutt will set the envelope sender of the message.</span><br><span class="line">set use_envelope_from = yes</span><br><span class="line"></span><br><span class="line"># This variable specifies what real name should be used when</span><br><span class="line"># sending messages.</span><br><span class="line">set realname=&quot;shejialuo&quot;</span><br><span class="line"></span><br><span class="line"># Specifies how to sort messages in the &quot;index&quot; menu</span><br><span class="line">set sort = threads</span><br><span class="line"></span><br><span class="line"># Controls whether or not Mutt will move read messages from your spool mailbox to your</span><br><span class="line"># $mbox mailbox</span><br><span class="line">set move = yes</span><br></pre></td></tr></table></figure><h3 id="Use-w3m-To-View-HTML-Content"><a href="#Use-w3m-To-View-HTML-Content" class="headerlink" title="Use w3m To View HTML Content"></a>Use w3m To View HTML Content</h3><p>I don’t want to use external browser to view HTML content. I use <a href="https://fiasko.io/projects/htmail-view.html.en">Reading html email with mutt</a> as the reference to setup. It’s not hard.</p><p>We need to first change the <code>mutt</code> configuration like the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Set w3m to view html content</span><br><span class="line">auto_view text/html</span><br><span class="line">alternative_order text/plain text/enriched text/html</span><br></pre></td></tr></table></figure><p>And the add the following content to the <code>~/.mailcap</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text/html; w3m -I %&#123;charset&#125; -T text/html; copiousoutput;</span><br></pre></td></tr></table></figure><h3 id="Use-Zathura-to-View-PDF-File"><a href="#Use-Zathura-to-View-PDF-File" class="headerlink" title="Use Zathura to View PDF File"></a>Use Zathura to View PDF File</h3><p>Append the following content to the <code>~/.mailcap</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/pdf; zathura %s;</span><br></pre></td></tr></table></figure><h3 id="Vim-Bindings"><a href="#Vim-Bindings" class="headerlink" title="Vim Bindings"></a>Vim Bindings</h3><p>Please refer to this wonderful blog <a href="https://ryanlue.com/posts/2017-05-21-mutt-the-vim-way">Mutt, the Vim Way</a>.</p><h3 id="Multiple-Accounts-Support"><a href="#Multiple-Accounts-Support" class="headerlink" title="Multiple Accounts Support"></a>Multiple Accounts Support</h3><p>We could use Mutt hook functionality to support multiple accounts. For multiple accounts, you must use <em>account-hooks</em> and <em>folder-hooks</em>.</p><ul><li><em>Folder-hooks</em> will run a command before switching folders. This is mostly useful to set the appropriate SMTP parameters when you are in a specific folder. For instance when you are in your work mailbox and you send an e-mail, it will automatically use your work account as sender.</li><li><em>Account-hooks</em> will run a command every time Mutt calls a function related to an account, like IMAP syncing. It does not require you to switch to any folder.</li></ul><p>I use folder-hooks because there is no account configuration for mutt. I use Gmail as the master configuration in <code>muttrc</code> like the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># GMail as the master</span><br><span class="line">source ~/.config/mutt/accounts/GMail</span><br><span class="line"></span><br><span class="line"># Multiple Accounts support</span><br><span class="line">folder-hook ~/Mail/GMail/* source ~/.config/mutt/accounts/GMail</span><br><span class="line">folder-hook ~/Mail/QQMail/* source ~/.config/mutt/accounts/QQMail</span><br></pre></td></tr></table></figure><p>Below is a full example for GMail and QQMail.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># ~/.config/mutt/accounts/GMail</span><br><span class="line"></span><br><span class="line">set from = &quot;shejialuo@gmail.com&quot;</span><br><span class="line">set sendmail = &quot;/usr/bin/msmtp -a GMail&quot;</span><br><span class="line">set spoolfile=&quot;$HOME/Mail/GMail/inbox&quot;</span><br><span class="line">set mbox=&quot;$HOME/Mail/GMail/seen&quot;</span><br><span class="line">set record=&quot;$HOME/Mail/GMail/sent&quot;</span><br><span class="line">set postponed=&quot;$HOME/Mail/GMail/draft&quot;</span><br><span class="line"></span><br><span class="line"># vim: ft=muttrc:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># ~/.config/mutt/accounts/QQMail</span><br><span class="line">set from = &quot;392499367@qq.com&quot;</span><br><span class="line">set sendmail = &quot;/usr/bin/msmtp -a QQMail&quot;</span><br><span class="line">set spoolfile = &quot;$HOME/Mail/QQMail/inbox&quot;</span><br><span class="line">set mbox=&quot;$HOME/Mail/QQMail/seen&quot;</span><br><span class="line">set record=&quot;$HOME/Mail/QQMail/sent&quot;</span><br><span class="line">set postponed=&quot;$HOME/Mail/QQMail/draft&quot;</span><br><span class="line"></span><br><span class="line"># vim: ft=muttrc:</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wiki.archlinux.org/title/mutt">Mutt ArchWiki</a></li><li><a href="https://www.fetchmail.info/fetchmail-man.html">Fetchmail Manual</a></li><li><a href="https://fiasko.io/projects/htmail-view.html.en">Reading html email with mutt</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I successfully configured the Mutt email client a long time ago. Many open-source communities continue to use mailing lists as their</summary>
        
      
    
    
    
    <category term="工具" scheme="https://luolibrary.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="技术" scheme="https://luolibrary.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>GSoC 2024 - Implement consistency check for refs</title>
    <link href="https://luolibrary.com/2024/05/03/GSoC-2024-Implement-consistency-check-for-refs/"/>
    <id>https://luolibrary.com/2024/05/03/GSoC-2024-Implement-consistency-check-for-refs/</id>
    <published>2024-05-03T09:02:53.000Z</published>
    <updated>2024-08-25T14:46:05.037Z</updated>
    
    <content type="html"><![CDATA[<p>I am fortunate to participate in <a href="https://summerofcode.withgoogle.com/programs/2024/projects/ukm4PTEF">GSoC 2024</a> contributing to <a href="https://git-scm.com/">Git</a>. This opportunity not only allows me to engage with one of the most influential open-source projects but also enables me to work under the guidance of experienced developers in the field.</p><p>I would like to extend my deepest gratitude to my two mentors, <a href="https://github.com/pks-t">Patrick</a> and <a href="https://github.com/KarthikNayak">Karthik</a>, who are both esteemed developers at <a href="https://about.gitlab.com/">GitLab</a>. Their expertise and guidance are invaluable, and I am incredibly fortunate to have the opportunity to learn from such experienced professionals in the field.</p><p>The primary purpose of this page is to serve as an archive for my weekly reports throughout the GSoC journey. These reports will detail my progress, challenges encountered, solutions devised, and learnings acquired each week. The intention behind maintaining this archive is twofold:</p><ol><li><strong>Transparency</strong>: To keep a transparent record of my contributions and progress throughout the project. This will allow my mentors, peers, and anyone interested in the project to track its development and my growth as a developer.</li><li><strong>Reflection</strong>: To serve as a reflective journal for myself. Documenting my journey will help me analyze my approaches, celebrate milestones, and learn from the challenges I face.</li></ol><p>You may access all related pages by visiting the <a href="https://luolibrary.com/categories/GSoC-2024/">GSoC 2024 category</a>.</p><h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><ol><li><a href="https://luolibrary.com/2024/05/27/GSoC-Community-Bonding-Period/">Community Bonding Period</a></li><li><a href="https://luolibrary.com/2024/06/02/GSoC-Week-1/">GSoC Week 1</a></li><li><a href="https://luolibrary.com/2024/06/10/GSoC-Week-2/">GSoC Week 2</a></li><li><a href="https://luolibrary.com/2024/06/17/GSoC-Week-3/">GSoC Week 3</a></li><li><a href="https://luolibrary.com/2024/06/30/GSoC-Week-4-5/">GSoC Week 4-5</a></li><li><a href="https://luolibrary.com/2024/07/08/GSoC-Week-6/">GSoC Week 6</a></li><li><a href="https://luolibrary.com/2024/07/16/GSoC-Week-7/">GSoC Week 7</a></li><li><a href="https://luolibrary.com/2024/07/28/GSoC-Week-8-9/">GSoC Week 8-9</a></li><li><a href="https://luolibrary.com/2024/08/13/GSoC-Week-10-11/">GSoC Week 10-11</a></li><li><a href="https://luolibrary.com/2024/08/25/GSoC-Final-Report/">GSoC Final Report</a></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I am fortunate to participate in &lt;a href=&quot;https://summerofcode.withgoogle.com/programs/2024/projects/ukm4PTEF&quot;&gt;GSoC 2024&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="GSoC 2024" scheme="https://luolibrary.com/categories/GSoC-2024/"/>
    
    
    <category term="GSoC" scheme="https://luolibrary.com/tags/GSoC/"/>
    
  </entry>
  
  <entry>
    <title>2023年终总结</title>
    <link href="https://luolibrary.com/2024/01/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://luolibrary.com/2024/01/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2024-01-31T15:41:28.000Z</published>
    <updated>2024-01-31T15:41:44.170Z</updated>
    
    <content type="html"><![CDATA[<p>2023年的尾声早就已经过了，时间总是如同利刃一般无情地划过。我坐在西电网安大楼的实验室中，脑袋已经相当沉重了。突然想着必须记录2023年，为什么呢？内心不禁发问。我想我必须记录自己的存在。时间总是无痕，我必须在这个无痕且透明的世界里面，刻下属于我的痕迹。</p><h2 id="逃离"><a href="#逃离" class="headerlink" title="逃离"></a>逃离</h2><p>我为什么第一个想到的词就是逃离呢？因为我自己在2023年4月份的时候，已经疲倦了。每当疲倦的时候，我都不禁地反问自己，打代码的意义是什么呢？在面实习的过程中基本没有得到什么正反馈，不知道自己该为何而战。心里开始烦躁了，焦急了，幸福的口袋似乎什么东西都没有装下。不经让我想起《Rewrite》游戏里面的经典话语：</p><blockquote><p>有一天，察觉到自己一无所有。</p><p>发现本以为堆满着幸福的口袋，其实空无一物。</p><p>因为我没为在口袋里塞些什么而努力，所以是理所当然的。</p></blockquote><p>我一直以打代码自豪，这是我重要的存在意义。然而，我深刻地记得我当时对自我的怀疑，我真的能够打代码一辈子吗？我真的喜欢代码吗？我真的不是通过代码来逃避自我吗？我很迷惘。于是乎我决定逃离，本来不打算五一回家的我，以逃离为目的踏上了回家的旅程。</p><h3 id="与挚友的交谈"><a href="#与挚友的交谈" class="headerlink" title="与挚友的交谈"></a>与挚友的交谈</h3><p>从西安到成都的高铁很快，我简单地背了个包就回到了成都。和我的挚友见面了，他仍然是往常一样，我也如往常一样。吃喝玩乐过后，我和他在他那租的一套一里面聊着天。我们从初中聊到高中再聊到大学，我第一次知道了他在初中的细腻情感，第一次知道了他在高中时候将自己的情感诉诸于暴力的悔恨。我许久没有如此真挚的聊天了。我不仅又反思了自己的傲慢与偏见，我们真的能够轻易地了解一个人吗？我们总是凭借一些自己或他人的所见，就轻易对一个人下定义。</p><p>不禁意间，天就变亮了，我的挚友给我说不要逃避自己的感情，既然无法开辟一段新的未来，就认真地审视自己的过去。我一下就想到了我这次回家的主题：<strong>逃离</strong>。我不由黯然伤神。这几年，我不知道自己是否前进了。我的一些朋友一直认为我是在原地踏步，说实话，我很讨厌听到这样的话。但是反过来想，如果是一个不那么了解我的人，也确实很容易得出这样的结论。</p><h3 id="回家的反思"><a href="#回家的反思" class="headerlink" title="回家的反思"></a>回家的反思</h3><p>家永远是最温暖的港湾，不论哪个时间回家都会有这样的感慨。和父母聊了聊天，见了见外公，吃到了熟悉的香味。我的烦恼与疑惑已然被抛在了脑后。然而，我不由自主地又翻阅了我和曾经的她在高中时期写的书信，所有的信都用一种巧妙的方式送回到了我的手里。我每次都觉得这是命运使然，似乎可能在那时她就已经决定分手了。</p><p>我每次看信的内容，涌起的都是极其复杂的感情。好的方面有对往日回忆的追忆，对昔日温暖的遗憾。坏的方面，我不禁质疑这份感情的真假，我无法分清什么是假什么是真。每次一想到这个，我感觉到极其的厌倦，爱过的人和事物为什么这么让人扫兴。</p><p>五一节和另外的挚友相见了，我说起了我的迷惘，对代码的疑惑，自己能否将其作为终生的事业而奋斗呢？对困扰自己多年的感情的疑惑，自己是真的在前进，还是在逃避自己的内心呢？</p><h3 id="重返重庆"><a href="#重返重庆" class="headerlink" title="重返重庆"></a>重返重庆</h3><p>为什么突然想去重庆呢？没有理由，就是想去了。见到了自己的大学室友，他没什么变化，一如既往地真诚。我才明白我追求的是什么，我希望能与人建立真诚的关系，希望我真诚待别人，也希望别人真诚待我。然而，我追求的这个东西确实这个世间最为宝贵的东西，我矛盾的地方就在于明知有些东西难以强求却想强求。</p><p>回到了自己本科的母校，见到了那个时候对我启发甚大的学业导师。他仍然是对科研保留着属于他的纯粹。我很羡慕他，我觉得我的科研生涯完全没有去解决过一个真正的科学问题，从来没有去探索过计算机科学应该去解决的问题。他推荐我去滑铁卢大学读博士，我说我硕士期间的科研素养积累的不够，他批评了我的想法，我现在都记得他的话语：</p><blockquote><p>你为什么不去看看国外是怎么搞科研的呢？如果你觉得不合适，退学就行了啊。而且去国外体会一下别人的文化，别人的生活，感受一下也是一个好事。</p></blockquote><p>我才意识到自己的局限性，才意识到自己在西电读研失去的一个最宝贵的东西：<strong>勇气</strong>。我自己扼杀了自己的可能性。我老师问我，你觉得一个博士最重要的是什么？我已经忘记我怎么回答的呢？他给我说了一个我很震撼的话，博士最重要的是去研究真正的科学问题。实际上，我在读研之前他应该也给我说过，但是在当时我很难理解这句话的真正含义。我不禁再次反思，我想成为一个纯粹的人，然而我的逃离证明了我对代码并不纯粹。</p><p>当我沉溺于另一个世界中的时候，我另一位朋友带着她的男朋友来了西安，突然将我从这段妄想拉回了现实，我急忙买了一张从重庆到西安的动车票回到了西安。似乎给我这段旅程画上了句号。</p><h2 id="正视"><a href="#正视" class="headerlink" title="正视"></a>正视</h2><p>五一的逃离让我认识了许多东西，我才发现所谓的实习和秋招我不应该焦虑，我保持我自己，做好我自己该做的事情。</p><ul><li>ehForwarderBot社区贡献：抽空认真地阅读了<code>efb-qq-plugin-go-cqhttp</code>的源码，给所有的方法添加了注解，并提供了发送文件和视频的功能。</li><li>database-systems-complete-book-solutions：基本完成了这本讲数据库原理的课后习题答案。</li></ul><p>当时我自己也学了很多东西，毕竟我还是很热爱coding的。</p><h2 id="婚礼"><a href="#婚礼" class="headerlink" title="婚礼"></a>婚礼</h2><p>来西安的朋友结婚了，在9月份给我发了请帖国庆她要结婚了，我由衷地为她感到高兴，她找到了属于自己的归宿。我曾经去过她家拜访，那个时候我只觉得自己格格不入，那种生活的气息甚至让我觉得有些许的窒息。我突然意识到自己是不是离小小的幸福越来越远了。</p><p>本以为能高兴去参加的婚礼，更多的却是给自己带来的痛苦。当我知道伴娘是我的前女友的时候，内心是一丝丝的期待，主要是好奇这五年的时间她变成了一个什么样的人。同时，我也很想见我的哥们儿。来到成都东站的时候，兄弟们已经在等着我了，然而殊不知噩梦才刚刚开始。</p><p>到了婚礼前一天晚上的时候，我一个哥们儿突然说，我的前女友叫我们过去玩。实际上，对于我来说我的内心是不愿意的，我或多或少觉得有点尴尬。我不知道我该说些什么，所以在与她见面的那一瞬间，我有逃避的想法，不过既然来了，肯定不能逃避了，我现在都能清晰地记得我内心所说的话：</p><blockquote><p>人不能逃避自我。</p></blockquote><p>然而，我的前女友只叫了我另外四个兄弟的名字，而忽略了我的名字，我一瞬间就语塞了。因为我的存在在此时此刻已经被她恶意地抽离了。于是乎，大家热烈地讨论明天早上堵门的事情，商量着小游戏该如何安排，而我并不存在，这让我第一次意识到了我似乎成为了《局外人》这本小说的主人公。只不过，他是主动的，而我是被动的。最讽刺的是，我一个兄弟对我所说的话：</p><blockquote><p>这么多年了，你还没走出来吗？</p></blockquote><p>我已经无法解释什么了，我第一次意识到了距离。然而，也是有开心的事情。第二天我听到新娘的致辞的时候，我才明白这份幸福属于她是应该的。真挚的情感表达，她放弃成为一个医生，选择了其他职业，感谢了她的父母对她职业选择的理解。感谢与她老公的相遇。说实话，我的眼睛湿润了，唯独真挚的情感能让人心震撼。</p><p>结婚的当天下午，他们都去打牌了，我自己选择了逃离。把我的MBP打开，写了一下午的MIT 6.824。这可谓是我最快乐的时光了，我终于找回了属于自己的存在。我从来不讨厌孤独一人，而是厌恶被人恶意的孤立。</p><p><img src="https://s2.loli.net/2024/01/31/E1LtaWz9ycKrGBj.png" alt="10月4日的提交记录"></p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>人生第一次参加了真正意义上的工作，然而第一份实习在NVIDIA，可能直接会把我惯坏吧。不如说已经把我惯坏了。上班的体验是很好的，然而晚上一个人待在上海小小的出租屋里面，感受到的确实实在的寂寞。突然急切地希望自己身边能有一个人陪伴，然而我却厌恶自己的想法，如果是因为寂寞就去靠近一个人，对她来说这是一个不公平的事情。所以由衷地觉得，晚上的时间要好好把握。要去充实自己的生活。不禁苦笑，说总是比做起来容易。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>人的一年说多也多，说少也少。然而，正如我开头所讲，简单地记录自己的存在。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;2023年的尾声早就已经过了，时间总是如同利刃一般无情地划过。我坐在西电网安大楼的实验室中，脑袋已经相当沉重了。突然想着必须记录2023年，为什么呢？内心不禁发问。我想我必须记录自己的存在。时间总是无痕，我必须在这个无痕且透明的世界里面，刻下属于我的痕迹。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="随笔" scheme="https://luolibrary.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>秋招总结</title>
    <link href="https://luolibrary.com/2023/11/20/%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://luolibrary.com/2023/11/20/%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-19T16:23:11.000Z</published>
    <updated>2023-12-02T17:16:55.682Z</updated>
    
    <content type="html"><![CDATA[<p>我觉得还是有必要记录一下我今年的秋招，但实际上记录的目的是为了什么呢？或许，仍然是刻印下自己的足迹并或多或少给阅读之人带来些许启发。</p><h2 id="暑期实习"><a href="#暑期实习" class="headerlink" title="暑期实习"></a>暑期实习</h2><p>其实投暑期实习的时候，我还是十分自信的，觉得靠着自己的能力拿下一个暑期实习是没有什么问题的。国内的大厂我投了百度、美团、阿里和腾讯。拼多多还有字节我直接选择没投，我觉得我没有那个命，而且我很不认同拼多多对不懂计算机的人群的歧视（参考<a href="https://mp.weixin.qq.com/s/P_EYQxOEupqdU0BJMRqWsw">2022年度最不可赦漏洞</a>）。同时我也投了一些外企的暑期实习，比如说亚马逊，英伟达和Paypal这些公司。</p><p>由于我本科双非，阿里实习简历过不了（面了个所谓的电话面），外企的面试属于可遇不可求。我总共只面试了百度，美团和腾讯这三个公司的暑期实习。</p><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p>百度是我最开始投的公司，当时我选择的岗位是C++软件研发工程师，做笔试的时候运气好，三道算法题我做出了两道算法题，拿到了面试机会。我现在已经记不清楚面试的内容了，我只记得一面做的是<a href="https://leetcode.cn/problems/reorder-list/">LeetCode 143</a>，二面做的是<a href="https://leetcode.cn/problems/reverse-nodes-in-k-group">LeetCode 25</a>。由于当时就没刷题，在只有20分钟左右的时间下，我很难写出在ACM模式下的LeetCode 25题。同时由于我自己自言自语地说了一句，感觉思路不对，然后面试官回了一句，“确实思路肯定有问题，你想一想”。又浪费了不少的时间。</p><p>题做不起，自然而然就被挂了。实际上二面的面试官问我做的科研横向项目在分布式集群下怎么收集的数据（实际上这个横向项目技术含量比较低，苦于没有实习经历，我还是得写一个看起来正经的项目吧），我说是使用python来收集的，他反问我为什么不适用Kafka。最后结束的时候他给我说搞工程和搞学术是不一样的。</p><p>其实，我很不能理解这些面试官的心态，没有必要教育我一顿。我的业务场景根本不需要那么重的东西，我只需要收集点数据处理就行了。</p><h3 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h3><p>美团我的笔试做的一塌糊涂，100分拿了个40分？美团我进行到了第二面，由于是投的基础研发部，所以面试需要进行三轮。</p><p>一面的面试官，主要是询问我做的国外公开课的<a href="https://github.com/shejialuo/CS149-fall21">CS149</a>中的能够解析任务依赖的异步Fork-Join任务库是怎么实现的，我记得当时我是把整个数据结构怎么设计的，以及同步的过程详细给面试官说了。可能因为回答的好，后面面试官给了我一个很简单的算法题。</p><p>然而，最令我震撼的是那个面试官在反问环节对我说的一番话（当时我问了他，你工作的时候觉得做的最有意思的事情是什么？）：</p><blockquote><p>你做的这个东西，我们一般都是直接用别人的库，平时我们很少写这些。可能你因为还是学生，没有上班，可能还比较幼稚，工作本身就是没有意义的，可能最大的乐趣就是解决了一个BUG。</p></blockquote><p>实际上，我被这句话震撼了。我其实并不是不明白上面这句话的道理。我感到了深深的悲哀，我一下意识到了我如果从事互联网的工作，可能也是这样。我该追求什么呢？</p><p>二面就比较抽象了，面试官一上来就问我我为什么笔试做的这么糟糕，我说题比较难，我尽力了。然后让我写了一个简化的我没有做的笔试题，然后他说我函数参数传错了。我或多或少写了5年的cpp了，真的不至于传参数都能传错。然后我直接说我确实参数传错了，然后面试就这样结束了，时间不到30分钟。</p><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><p>腾讯是面的最舒服的，因为他直接问我现在能来实习吗？我说不能，然后面试就结束了。多好不要浪费大家的时间。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>我在面完上面三家公司，感到了深深的疲倦。于是在当时我在朋友圈发了以下的内容：</p><blockquote><p>从2月份到现在，面试了百度，腾讯，阿里这三家公司。我的体会是，面试变成了一件相当无聊的事情，二十分钟不明所以聊一下你做的项目，然后给你一道LeetCode的中等题目或者hard的题目让你做一做，然后你就一直做，面试官几乎不说话，做得起就继续，做不起就拜拜。如果你做起了，还会因为你现在不能来实习成为廉价劳动力直接挂你。</p><p>我在想这些面试官对我的了解基本等于0，就因为我能做起一个题就让我继续下一轮……，我是真心觉得无语。问些八股还要去找公司里面的题库，问<code>new</code>和<code>malloc</code>的区别这种无聊的问题。</p><p>从现在的经验来看，国内的互联网做的东西真心很无聊。还是思考一下换赛道吧，还是希望能做点有意思的东西的。</p></blockquote><p>于是乎，我做了一个很不理智的决定，直接放弃了其他大厂的暑期实习。根本不想面，我觉得面试毫无意义，同时去这些大厂实习也是毫无意义（当然，我肯定是偏激的观点）。不如在学校做点有意思的事情。</p><p>差不多从四月份开始我就开始学习<a href="https://interpreterbook.com/">Writing An Interpreter in Go</a>和<a href="https://compilerbook.com/">Writing A Compiler In Go</a>，我用cpp进行了自己的一个实现（见<a href="https://github.com/shejialuo/cppmpiler">cppmpiler</a>）。</p><p>然后，给<a href="https://github.com/ehForwarderBot">ehForwarderBot</a>社区做了一些贡献，主要是给slave端的QQ添加发送文件的支持。</p><p>当然，我不得不刷LeetCode。这可谓是我秋招过程中做的最痛苦的事情。让我回想起高中为了成绩不得不刷题的感觉。明明我还想写一个模拟器，还想去探索一下内存模型和缓存一致性。</p><h2 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h2><p>秋招是从7月份就开始的，因为很多公司已经开始提前批了。还是希望自己能毕业进大厂的，至少平台要高一些。所以还是采取了海投策略。</p><h3 id="百度提前批"><a href="#百度提前批" class="headerlink" title="百度提前批"></a>百度提前批</h3><p>百度提前批约我面试的时间应该是2023年7月中旬左右，一面的面试官是一位女生，我已经记不清她开了摄像头还是没开摄像头，听着她虚弱的声音，我就觉得她已经很累了。她问了我一些并行计算的项目，然后就让我做两道算法题了。我直接把两道算法题秒了，毕竟我不是在做题，我只是在默写。</p><p>二面咋说了，面试官还是比较有水平的，问了我并行计算，怎么使用CUDA的，然后怎么做Reduce操作。然后问了我个CPU指令乱序，回答不上（那个时候体系结构方面的知识确实忘了许多）。然后写了个LRU，给我介绍了一下部门的情况，面完二面就直接挂了。</p><p>要说我不觉得不甘，那肯定是扯淡的。不过从实习我得到的一个宝贵的经验就是面试也就是这个样，主要还是看顺眼了就行了。许多东西都是强求不得的。</p><h3 id="美团-1"><a href="#美团-1" class="headerlink" title="美团"></a>美团</h3><p>美团由于填写简历的时候填错了，学历填成了非统招，所以做完笔试就没有后续了，实际上我觉得cpp面美团也没有什么优势，毕竟java基本不懂，数据库也只会底层的原理，不懂上层的东西。</p><h3 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h3><p>阿里总共有6个部门，因为阿里卡第一学历，所以我阿里的简历筛选一个都通过不了。我其实觉得这个公司的HR挺无能的，作为一个公司核心就应该是选择人才，如果通过卡第一学历甚至那什么28所名单来进行筛选，只能够体现这个公司的无能。</p><h3 id="腾讯-1"><a href="#腾讯-1" class="headerlink" title="腾讯"></a>腾讯</h3><p>腾讯我投的是后台开发，说实在的，我觉得cpp就不应该投后台开发，然而我没有更好的选择。腾讯第一次捞我，把我调到技术运营的岗位去了，我研究生做的是云方面的研究，这个岗位就是针对内部系统的运营维护的，面试了就是聊天加项目加八股。没什么新意。然后二面也比较常规，三面主管面没发挥好，可能主管觉得我go语言基础不是那么好加上iptables的实现没有解释的清楚（我忘了），三面就给我挂了。</p><p>后面第二次捞我，是腾讯健康的部门的后台开发，第一面面了两个小时，当时我就知道多半这次面试就已经结束了。实际上这个题的代码很不好写，内存有限制，面试官一定要让我把代码写出来。前面八股问了半个小时，我和他讨论思路用了50分钟，怎么设计数据结构是合理的，怎么避免内存限制，怎样效率最高。然后我就开始写了，这个代码很不好调试，从4点开始面到5点50左右，我的精神已经开始恍惚了。我主要想吃饭了，然后我主动给面试官说我写不了了，就这样结束吧，大家好吃饭。</p><h3 id="B站"><a href="#B站" class="headerlink" title="B站"></a>B站</h3><p>B站由于认识HR，虽说简历全挂了，还是给了我一个分布式存储开发岗位的机会。一面的话是八股加体系结构，这可以说是我进行的最有深度的一次面试了，给面试官讲解内存子系统。当然二面只进行了20分钟就结束了，显然B站不招人嘛。但是我觉得这是给我想法转变一次的面试，cpp真的要搞后台开发吗？我学的技能就不是互联网的东西。</p><h3 id="龙芯"><a href="#龙芯" class="headerlink" title="龙芯"></a>龙芯</h3><p>龙芯的面试我是已经在英伟达实习的时候面的了，这个岗位相当有意思，名字叫基础软件研发，主要做gcc和ocaml的编译器适配和优化，你可知对于一个学习过Haskell的人并接触过一些ocaml语言的人来说，这个岗位有多么的吸引。面试的过程还是主要考察体系结构的知识，以及询问我怎么在CPU上实现矩阵的乘法的优化。二面主要问我调试器是怎么实现的，怎么做并行计算的，怎么实现SUNDR（一个安全方面课程的最后的作业），然后问了我个在Linux系统上用鼠标左键点击PPT翻页，从设备到内核态到用户态的整个过程（这是一个很有意思的问题）。目前，状态在泡池子中。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>实际上，我还投了许多公司。</p><ul><li>简历挂的：字节，拼多多，京东，滴滴，小米，米哈游，大疆，网易。</li><li>泡池子的：华为（云计算开发工程师），比亚迪（操作系统研发工程师）。</li></ul><h3 id="英伟达"><a href="#英伟达" class="headerlink" title="英伟达"></a>英伟达</h3><p>我在秋招的时候仍然是投了英伟达的实习岗位，其实我只是抱着试一试的心态，无论是学历还是经历，我比起申请的人都差了不少。但是英伟达给了我面试的机会，这个岗位是Software Intern - CUDA Test Development。实际上英伟达的面试能够让我感受到很重要的一点，就是注重对基础的考察，而且在面试过程中与面试官的交流才是最重要的，怎么去解决问题。面试官会和你一起去沟通解决这个问题。</p><p>实际上我在面完这个岗，是给我发了拒信的。当时候另外一个实习岗位Software Intern - Autonomous Vehicles给了我面试机会。然而，好巧不巧，HR找到我，说上一个岗位准备给我发offer了（其实是有人鸽了），在确定性和不确定性之间，我选择了确定性的offer。因为已经9月份底了，加上英伟达的光环，我还是非常希望能够转正的，毕竟我没拿到一个大厂的offer（或者说，他们连面试的机会都不愿意给我）。于是我选择放弃了当前的面试，接受了这个offer。实际上目前回想，我不应该做这个选择，我应该坚持我想要的。</p><p>正式入职英伟达的时候已经10月中旬了，软件测试的工作说来有趣说来也无趣，公司的同事以及主管都对我很好，英伟达给的福利待遇也很好。我其实已经十分地幸运了，能够拿到这样的实习，能够有转正的机会。这是我敢都不敢想的事情。然而，我的主管很大方地支持我去投内部的秋招，我是非常的感动。而且，实习也会给你自己探索的机会，我就在实习期间写了个python的命令行工具来自动化流程，提升大家的效率。主管还给了我20分钟的时间作汇报，我当时才进组两周左右。</p><p>于是乎，我投递了System Software Engineer, SoC - New College Grad的岗位，我为什么想投这个岗位，是因为我内心想做的事情驱动着我。我非常感谢能给我这个面试机会，如果不是因为我能够拿到英伟达实习的机会，我是绝对拿不到秋招的面试机会。面试主要还是问体系结构方面的知识，我最感动的是第一位面试官对我的评价：</p><blockquote><p>从你的身上，我感受到你对技术的热爱与热情。</p></blockquote><p>我从来没有得到过这么高的评价，在我看来，这是对我很高的认可。然后就是二面从1点进行到5点，仍然是我所说的，交流沟通才是最重要的，在会议室和面试官一起在白板上写代码，一起讨论问题。英伟达的面试体验可谓是我面过的公司最好的，二面基本都是4个小时，足以体现对面试者相当高的尊重。</p><p>我最终也是幸运地拿到了这份offer，我做梦也不敢想的事情发生到了自己的身上。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我的秋招并不是那么顺利，因为第一学历的限制我几乎没有什么好的选择，加上我学的东西几乎与业务无关（我在整个学生生涯写的web后端还有sql几乎等于没有），我几乎拿不到大厂的offer，如果没有英伟达的offer，我就只能等华为，龙芯还有比亚迪了。</p><p>然而，我一直在思考我自己想要的是什么，我前段时间看到的文章<a href="https://justinyan.me/post/5790">每个人每天都只有24小时，希望我的选择真的是我的选择</a>让我深思了不少，正如同文章的题目一样，对自我的叩问才是成长，做什么样的事，成为什么样的人，需要用一辈子的时间去寻找答案。我为什么面试互联网大厂几乎到主管面就不行，我思考过这个问题，是因为我没有态度，我内心其实一直在排斥。如果我去做后台开发自己学的这些底层知识还有什么用。所以我面试的时候很多时候遇到无语的问题，我一般不会反驳，而是说“嗯嗯，你说得对”。</p><p>在整个秋招期间，我看到了本硕西电的有些朋友学java能够拿很多大厂的offer，我的内心难免会有嫉妒之情，对自己第一学历被卡的无奈，以及底层知识远离业务的无奈。每当面试官面试的时候问我，你做这个东西有什么意义的时候，我总是无奈一笑，说我挺喜欢做这些没有意义的活。</p><p>后面我意识到了不能着急，于是我仍然按照我自己的步骤走，因为学习并行计算，认识到了必须要去深入了内存子系统才能提高程序性能，于是我认真了学习了这两本书（从9月份到现在，实际上正是因为这两本书让我在英伟达秋招的这个岗位占了优势）：</p><ul><li>UNIX systems for modern architectures: symmetric multiprocesssing and caching for kernel programmers.</li><li>A Primer on Memory Consistency and Cache Coherence.</li></ul><p>实际上，我觉得人生就应该做一些没有意义的事情。这些没有意义的事情总会在运气到来的时候给予我们或多或少的帮助。在我看来，面试还是运气大于实习，我不喜欢超人的想法，觉得努力就能够有所收获，这是一种傲慢的想法。失去了同理心的想法。我一点也不觉得我能拿到这个offer是我的实力占主要因素，能够得到面试机会的人，没有人实力很差，至少我觉得大家都差不多。</p><p>我最后想用《三傻大闹宝莱坞》中的结尾话作为总结：</p><blockquote><p>追求卓越，成功将不期而至。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我觉得还是有必要记录一下我今年的秋招，但实际上记录的目的是为了什么呢？或许，仍然是刻印下自己的足迹并或多或少给阅读之人带来些许启发。&lt;/p&gt;
&lt;h2 id=&quot;暑期实习&quot;&gt;&lt;a href=&quot;#暑期实习&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="随笔" scheme="https://luolibrary.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>TopKProblem实战</title>
    <link href="https://luolibrary.com/2023/09/19/TopKProblem%E5%AE%9E%E6%88%98/"/>
    <id>https://luolibrary.com/2023/09/19/TopKProblem%E5%AE%9E%E6%88%98/</id>
    <published>2023-09-19T15:06:35.000Z</published>
    <updated>2023-09-19T15:17:31.131Z</updated>
    
    <content type="html"><![CDATA[<p>最近面试一直被问关于Top K的问题。网上有许多已经有这方面的答案了，然而我认为这些答案仅仅是局限于表面。网上的答案几乎都没有任何的代码实现，我认为理解这个问题需要自己去进行实现。仍然引用费曼的经典话：</p><blockquote><p>What I cannot create, I do not understand.</p></blockquote><p>本教程的代码位于<a href="https://github.com/shejialuo/topKProblem">topKProblem</a>仓库中。</p><h2 id="最经典的Top-K问题"><a href="#最经典的Top-K问题" class="headerlink" title="最经典的Top K问题"></a>最经典的Top K问题</h2><p>最经典的Top K问题忽略任何机器的限制，也就是从一个数组中得到前K大的数。有两种经典的方法：</p><ul><li>快速选择</li><li>堆排序</li></ul><h3 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">partition</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;data, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> pivot = data[end];</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = start - <span class="number">1</span>, j = start;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[j] &gt; pivot) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      std::<span class="built_in">swap</span>(data[i], data[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::<span class="built_in">swap</span>(data[i + <span class="number">1</span>], data[end]);</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">helper</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;data, <span class="type">int</span> k, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> mid = <span class="built_in">partition</span>(data, start, end);</span><br><span class="line">  <span class="type">int</span> index = mid - start + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index == k) &#123;</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; k) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(data, k, start, mid - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(data, k - index, mid + <span class="number">1</span>, end);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">topKUsingPartition</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;data, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> index = <span class="built_in">helper</span>(data, k, <span class="number">0</span>, data.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> std::vector&lt;<span class="type">int</span>&gt;&#123;data.<span class="built_in">cbegin</span>(), data.<span class="built_in">cbegin</span>() + index + <span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">topKUsingHeap</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; &amp;data, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(k, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  std::priority_queue&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt;, std::greater&lt;<span class="type">int</span>&gt;&gt; heap&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    heap.<span class="built_in">push</span>(data[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; data.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (data[i] &gt; heap.<span class="built_in">top</span>()) &#123;</span><br><span class="line">      heap.<span class="built_in">pop</span>();</span><br><span class="line">      heap.<span class="built_in">push</span>(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    ans[i] = heap.<span class="built_in">top</span>();</span><br><span class="line">    heap.<span class="built_in">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受限环境下的Top-K问题"><a href="#受限环境下的Top-K问题" class="headerlink" title="受限环境下的Top K问题"></a>受限环境下的Top K问题</h2><p>假设我们的机器只有30M的内存，我们希望处理500M的<code>int_32</code>类型的数据，这些数据存储在文件中。我在此处假设<code>k</code>的大小是我们能够接受的，也就是<code>k</code>的大小对于内存而言可以忽略。</p><p>此部分的代码可以直接在<a href="https://github.com/shejialuo/topKProblem/tree/master/src/topKRestricted">仓库</a>中查看。</p><h3 id="使用堆排序"><a href="#使用堆排序" class="headerlink" title="使用堆排序"></a>使用堆排序</h3><p>最简单的方式可能仍然是使用堆排序，因为我们仅仅只需要在内存中维护$O(k)$的大小，对于大文件我们每次只需要读取20M即可，因此内存永远不会超过。然而我们必须思考一个问题，数字是以什么形式保存在文件中。我在这让假设数字都是通过二进制方式的形式存储的，减少分割等操作。</p><p>我采取了如下的思路实现，在Linux系统下通过<code>setrlimit</code>限制进程的内存大小，使用c++17的<code>filesystem</code>标准库在临时文件中写入数据，进行操作。</p><h3 id="使用快速选择"><a href="#使用快速选择" class="headerlink" title="使用快速选择"></a>使用快速选择</h3><p>对于大文件我们每次只需要读取20M即可，然后选择前<code>k</code>大的数。我们就能得到一系列的数组，然后我们直接将数组合并，得到一个新的数组，其大小不可能超过内存，然后再次选择前<code>k</code>大的数，从而得出答案。当然我们也可以使用堆来处理，毕竟这属于一个子问题。</p><h3 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h3><p>执行的结果如下所示：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=== Result</span><br><span class="line">Heap average time: 1.4765 s</span><br><span class="line">Select average time: 1.90026 s</span><br></pre></td></tr></table></figure><p>可以看出，使用堆还是要快一些的，这是因为减少了内存的拷贝。</p><h2 id="受限条件下基于多线程的快速选择"><a href="#受限条件下基于多线程的快速选择" class="headerlink" title="受限条件下基于多线程的快速选择"></a>受限条件下基于多线程的快速选择</h2><p>基于快速选择的方法可以使用多线程进行加速，这是使用堆比不上的优势，现在的处理器基本上都是多核，此处使用多线程进行加速，如何构建多线程是一个问题。首先每个线程即是生产者也是消费者，这样代码写出来就极其的复杂，所以我的一个思路还是确定需要完成的任务数，通过任务数来实现线程之间的同步。</p><h2 id="问题变种"><a href="#问题变种" class="headerlink" title="问题变种"></a>问题变种</h2><p>所谓的问题变种，无非就是通过哈希得到频率，然后根据频率来得到Top K。没有任何本质的区别。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>实践出真知。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近面试一直被问关于Top K的问题。网上有许多已经有这方面的答案了，然而我认为这些答案仅仅是局限于表面。网上的答案几乎都没有任何的代码实现，我认为理解这个问题需要自己去进行实现。仍然引用费曼的经典话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I cannot</summary>
        
      
    
    
    
    
    <category term="技术" scheme="https://luolibrary.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="https://luolibrary.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.858-SUNDR的实现</title>
    <link href="https://luolibrary.com/2023/09/11/MIT6-858-SUNDR%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://luolibrary.com/2023/09/11/MIT6-858-SUNDR%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-09-11T07:09:18.000Z</published>
    <updated>2023-09-11T07:09:35.922Z</updated>
    
    <content type="html"><![CDATA[<p>MIT6.858最后一个实验是复现论文<a href="https://www.usenix.org/legacy/event/osdi04/tech/full_papers/li_j/li_j.pdf">Secure Untrusted Data Repository</a>的串行化实现。在开始做这个实验之前，你应该仔细地阅读这篇论文。</p><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><p>MIT6.858提供了基本的文件系统代码，了解这个文件系统是如何构建的，对于代码实现的相当重要。</p><h3 id="基本的类型定义"><a href="#基本的类型定义" class="headerlink" title="基本的类型定义"></a>基本的类型定义</h3><p>在SUNDR中，有用户和群组的划分。同时每一个文件都是由<code>&lt;principal, i-number&gt;</code>对应的。显然，每个用户和群组都可以有多个文件，所以只需要再定义一个类包含用户（群组）和所有的文件个数。故源代码中定义了三个类型：</p><ul><li><code>User</code>：继承于<code>Principal</code>。</li><li><code>Group</code>：继承于<code>Principal</code>。</li><li><code>I</code>：包含<code>Principal</code>和<code>n</code>。</li></ul><h3 id="基本的存储实现"><a href="#基本的存储实现" class="headerlink" title="基本的存储实现"></a>基本的存储实现</h3><p>在文件系统中，最基本的存储单元是<code>Block</code>类，其可以存储数据、inode等信息。由于SUNDR基于快照的机制保障安全，故其与git的实现机制相似，基于content-hash机制对每一个Block进行哈希。故<code>Block</code>类提供了两个函数：</p><ul><li><code>store(blob)</code>：<code>blob</code>是存储的数据，其为二进制数据。其返回值为二进制内容的sha1sum。</li><li><code>load(chash)</code>：根据哈希值找到相应的block，进而读取block中的二进制数据。</li></ul><p>同时，文件系统定义了<code>Inode</code>类，用于作为元数据。其包含了某一个文件或者目录的基本信息，例如类型，创建的时间，修改的时间及其对应的所有的block的哈希值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Inode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.kind = <span class="number">0</span> <span class="comment"># 0 is dir, 1 is file</span></span><br><span class="line">        <span class="variable language_">self</span>.ex = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.ctime = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.mtime = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.blocks = []</span><br></pre></td></tr></table></figure><p>显然，<code>Inode</code>类也是存储在block中的，所以我们需要基于<code>ihash</code>通过调用<code>block.load(chash)</code>函数得到其二进制数据，然后进行反序列化得到其字段值。当我们想要获得文件的值时，我们直接使用如下的函数即可：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;&quot;</span>.join([secfs.store.block.load(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="variable language_">self</span>.blocks])</span><br></pre></td></tr></table></figure><p>然而，我们必须考虑目录这种情况。在SUNDR中，目录的每一项元素都是一个元组<code>(filename, I)</code>。其中其定义了<code>add</code>函数来实现在一个目录里面添加一个新项。同时定义了<code>find_under</code>函数用来查找目录。</p><h3 id="Itable"><a href="#Itable" class="headerlink" title="Itable"></a>Itable</h3><p>每个用户和群组都拥有一个<code>i-table</code>。对于用户而言，<code>i-table</code>保存的是<code>i-number</code>到<code>ihash</code>的映射。对于群组而言，<code>i-table</code>保存的是<code>i-number</code>到<code>I</code>的映射。因此对于<code>Itable</code>类而言，源码利用了python的动态性，直接定义了一个dict。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Itable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.mapping = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">ihandle</span>):</span><br><span class="line">        b = secfs.store.block.load(ihandle)</span><br><span class="line">        <span class="keyword">if</span> b == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        t = Itable()</span><br><span class="line">        t.mapping = pickle.loads(b)</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(<span class="variable language_">self</span>.mapping)</span><br></pre></td></tr></table></figure><p>然后，其定义了一个关键的函数<code>resolve</code>，基于<code>i-table</code>解析得到<code>ihash</code>或者<code>I</code>。同时，该函数支持递归地解析<code>I</code>最终得到<code>ihash</code>。其思路实现比较简单。</p><p>最关键的在于<code>modmap(mod_as, i, ihash)</code>函数，对于某个用户<code>mod_as</code>而言，给定一个<code>I</code>类，需要修改或者创建其在<code>i-table</code>中的映射。然而关键在于<code>I</code>有两类情况，一种是用户，另一种是群组。</p><ul><li>对于用户而言，其<code>mod_as</code>和<code>i.p</code>必须相等。我们需要修改或者创建其在<code>i-table</code>中的映射，这个过程相当简单。</li><li>对于群组而言，情况就会比较复杂了。我们首先需要基于提供的<code>i</code>找到其对应的<code>I</code>，也就是调用<code>resolve</code>函数并进行一层的解析。如果<code>I.p = mod_as</code>，证明群组的修改和用户的修改是一致的，我们一定会最先对用户的修改进行处理，所以此处不需要进行任何操作。如果不是那么证明我们需要创建一个新的<code>I</code>，于是调用<code>modmap(mod_as, I(mod_as), ihash)</code>在<code>mod_as</code>用户的<code>i-table</code>中添加映射。</li></ul><h3 id="文件系统API接口"><a href="#文件系统API接口" class="headerlink" title="文件系统API接口"></a>文件系统API接口</h3><p>源码已经给出了某些文件系统接口的实现，例如<code>link</code>函数，<code>link</code>函数的作用即将一个<code>I</code>添加到当前目录中，其原理很简单，首先需要基于当前目录构建一个<code>Directory</code>。然后调用<code>add</code>函数添加目录，并使用<code>modmap</code>修改映射关系。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Omit syntax check and write check</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">link</span>(<span class="params"><span class="keyword">def</span> link(<span class="params">link_as: User, i: I, parent_i: I, name: <span class="built_in">str</span></span>):</span></span><br><span class="line"><span class="params">    parent_ihash = secfs.store.tree.add(<span class="params">parent_i, name, i</span>)</span></span><br><span class="line"><span class="params">    secfs.tables.modmap(<span class="params">link_as, parent_i, parent_ihash</span>)</span>)</span><br></pre></td></tr></table></figure><p>在SUNDR论文中，文件系统的初始化是root用户生成一对私钥&#x2F;公钥，同时创建<code>.users</code>和<code>.groups</code>文件，存储相应的公钥及印映射信息。文件系统使用<code>init</code>函数提供了接口。其首先需要创建一个类型为目录的inode，然后添加<code>.</code>和<code>..</code>目录。同时需要创建<code>.users</code>和<code>.groups</code>文件，调用<code>link</code>函数添加到根目录中。</p><p>在了解了基本的数据结构以及映射关系后，我们就可以开始编写自己的代码。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="实现创建文件和目录的功能"><a href="#实现创建文件和目录的功能" class="headerlink" title="实现创建文件和目录的功能"></a>实现创建文件和目录的功能</h3><p>我们需要所做的第一个工作就是实现创建文件和目录。无论是文件还是目录我们都需要首先创建一个<code>Inode</code>。然后我们需要将其存储在文件系统中，并得到其hash值<code>ihash</code>。然后我们需要调用<code>modmap</code>修改itable的映射关系。对于目录而言，我们需要做更多额外的工作。我们需要添加在当前目录创建<code>.</code>和<code>..</code>，并调用<code>modmap</code>修改itable的映射关系。然后我们调用<code>link</code>维护目录结构关系。</p><p>然而，我们需要考虑如果是为一个群组创建文件和目录呢？实际上面的流程都是一样的，因为对于群组来说，<code>itable</code>是存储的映射，所以我们仅仅只需要更新这个映射关系即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_create</span>(<span class="params">parent_i: I, name: <span class="built_in">str</span>, create_as: User, create_for: Principal, isdir: <span class="built_in">bool</span></span>):</span><br><span class="line">    ...</span><br><span class="line">    ihash = secfs.store.block.store(node.<span class="built_in">bytes</span>())</span><br><span class="line">    store_i = secfs.tables.modmap(create_as, I(create_for), ihash)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isdir:</span><br><span class="line">        new_ihash = secfs.store.tree.add(store_i, <span class="string">b&#x27;.&#x27;</span>, store_i)</span><br><span class="line">        secfs.tables.modmap(create_as, store_i, new_ihash)</span><br><span class="line">        new_ihash = secfs.store.tree.add(store_i, <span class="string">b&#x27;..&#x27;</span>, parent_i)</span><br><span class="line">        secfs.tables.modmap(create_as, store_i, new_ihash)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> create_for.is_group():</span><br><span class="line">        secfs.tables.modmap(create_as, I(create_for), store_i)</span><br><span class="line"></span><br><span class="line">    link(create_as, store_i, parent_i, name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store_i</span><br></pre></td></tr></table></figure><h3 id="Version-Structure-List实现"><a href="#Version-Structure-List实现" class="headerlink" title="Version Structure List实现"></a>Version Structure List实现</h3><p>目前所有的映射关系都是存储在<code>current_table</code>中的，其是存储在内存中的，当有其他客户端时，其访问服务端，得不到<code>current_table</code>的信息，所以需要对<code>current_table</code>进行修改，其需要存储在文件系统中。在这个过程中，我们不考虑任何安全方面的实现。</p><p>我们首先需要认识到<code>current_table</code>保存的是<code>Principal</code>到<code>Itable</code>的映射。由于函数<code>resolve</code>以及<code>modmap</code>严重依赖于<code>current_table</code>，所以应该尽可能合理地设计数据结构，减少代码的更改。</p><p>在SUNDR原论文中，其提供的数据结构<code>VersionStructure</code>包含每一个用户的<code>i-handle</code>，所属的群组的<code>g-handle</code>以及<code>version_vector</code>。这是与当前的逻辑矛盾的，当前的映射单独保存了用户和群组的，为了简便起见，我没有采取这样的数据结构。我仍然按照当前的逻辑进行实现。因此，我定义了如下的数据结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VersionStructure</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    `VersionStructure` is the most important data structure in this lab. In</span></span><br><span class="line"><span class="string">    the original SUNDR paper, the version structure is specified only for</span></span><br><span class="line"><span class="string">    the `User`. Each user could have one and more group handles. However,</span></span><br><span class="line"><span class="string">    it&#x27;s a bad idea for the current code. Because the `current_itables`</span></span><br><span class="line"><span class="string">    mapping the `I` to the inode. The `I.p` could be user or the group.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    version_vector : <span class="built_in">dict</span>[Principal, <span class="built_in">int</span>]</span><br><span class="line">    <span class="comment"># It could be the user or the group, it is only the hash, should</span></span><br><span class="line">    <span class="comment"># later read from</span></span><br><span class="line">    i_handle: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.version_vector = &#123;&#125;</span><br><span class="line">        <span class="variable language_">self</span>.i_handle = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>根据SUNDR论文，每次每个客户端对文件系统进行操作之间，都需要从服务器下载最新的VSL，当进行了修改需要对VSL进行验证，如果验证通过，则进行数字签名，上传VSL。从性能的角度来说，传递单独的<code>VersionStructure</code>是节省带宽的，然而我认为此处不是这个lab的核心，因此我才用了最粗暴的方式，即上传整个VSL。故定义了如下的数据结构：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VersionStructureList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    `VersionStructureList` is the core data structure here, It</span></span><br><span class="line"><span class="string">    contains the the user or the group `VersionStructure`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    version_structures: <span class="built_in">dict</span>[Principal, VersionStructure]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.version_structures = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Download the `version_structure_list` from the server, it should</span></span><br><span class="line"><span class="string">        be called every time it operates on the file system. It&#x27;s may</span></span><br><span class="line"><span class="string">        be a bad idea, but it is simple.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> server</span><br><span class="line">        blob = server.read_version_structure_list()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> blob == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;data&quot;</span> <span class="keyword">in</span> blob:</span><br><span class="line">            <span class="keyword">import</span> base64</span><br><span class="line">            blob = base64.b64decode(blob[<span class="string">&quot;data&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.version_structures = pickle.loads(blob)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> server</span><br><span class="line">        blob = pickle.dumps(<span class="variable language_">self</span>.version_structures)</span><br><span class="line">        server.store_version_structure_list(blob)</span><br></pre></td></tr></table></figure><p>我们要在server端添加<code>store_version_structure_list</code>RPC调用，以及<code>read_version_structure_list</code>RPC调用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SecFSRPC</span>():</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">    @Pyro4.expose</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_version_structure_list</span>(<span class="params">self</span>):</span><br><span class="line">        chash = <span class="variable language_">self</span>.version_structure_list_hash</span><br><span class="line">        <span class="keyword">if</span> chash != <span class="literal">None</span> <span class="keyword">and</span> chash <span class="keyword">in</span> <span class="variable language_">self</span>.blocks:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.blocks[chash]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @Pyro4.expose</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_version_structure_list</span>(<span class="params">self, blob</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;data&quot;</span> <span class="keyword">in</span> blob:</span><br><span class="line">            <span class="keyword">import</span> base64</span><br><span class="line">            blob = base64.b64decode(blob[<span class="string">&quot;data&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> hashlib</span><br><span class="line">        chash = hashlib.sha224(blob).hexdigest()</span><br><span class="line">        <span class="variable language_">self</span>.blocks[chash] = blob</span><br><span class="line">        <span class="variable language_">self</span>.version_structure_list_hash = chash</span><br></pre></td></tr></table></figure><p>现在到达了最关键的一步，也就是我们需要修改<code>resolve</code>和<code>modmap</code>中的代码，我们需要替换掉<code>current_table</code>。我们需要一点即可，即<code>VersionStructure</code>存储的是<code>i-handle</code>我们必须进行磁盘的读写，而不是类似源码中直接存储<code>Itable</code>（实际上这一步是可以优化的，如果其<code>i-handle</code>没有发生变化，我们可以实现缓存，而不是从磁盘中实现读写，然而我忽略了因为这并不是这个lab的核心）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resolve</span>(<span class="params">i: I, resolve_groups = <span class="literal">True</span></span>):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">global</span> version_structure_list</span><br><span class="line">    <span class="keyword">if</span> principal <span class="keyword">not</span> <span class="keyword">in</span> version_structure_list.version_structures:</span><br><span class="line">        <span class="comment"># User does not yet have an itable</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    i_handle = version_structure_list.version_structures[principal].i_handle</span><br><span class="line">    t = Itable.load(i_handle)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modmap</span>(<span class="params">mod_as: User, i: I, ihash</span>) -&gt; I:</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># find (or create) the principal&#x27;s itable</span></span><br><span class="line">    t = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">global</span> version_structure_list</span><br><span class="line">    <span class="keyword">if</span> i.p <span class="keyword">not</span> <span class="keyword">in</span> version_structure_list.version_structures:</span><br><span class="line">        <span class="keyword">if</span> i.allocated():</span><br><span class="line">            <span class="comment"># this was unexpected;</span></span><br><span class="line">            <span class="comment"># user did not have an itable, but an inumber was given</span></span><br><span class="line">            <span class="keyword">raise</span> ReferenceError(<span class="string">&quot;itable not available&quot;</span>)</span><br><span class="line">        t = Itable()</span><br><span class="line">        version_structure_list.version_structures[i.p] = VersionStructure()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no current list for principal&quot;</span>, i.p, <span class="string">&quot;; creating empty table&quot;</span>, t.mapping)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i_handle = version_structure_list.version_structures[i.p].i_handle</span><br><span class="line">        t = Itable.load(i_handle)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    i_handle = secfs.store.block.store(t.<span class="built_in">bytes</span>())</span><br><span class="line">    version_structure_list.version_structures[i.p].i_handle = i_handle</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p>到了此处，我们就可以通过百分之87的测试。可见，我们已经完成了大部分的工作。剩下的就是实现安全方面的功能，这个lab最难的并不在于代码，而是你如何进行数据结构的设计。</p><h3 id="安全方面实现"><a href="#安全方面实现" class="headerlink" title="安全方面实现"></a>安全方面实现</h3><p>要实现安全方面就很简单了，需要考虑如下两个（由于时间关系，此处我并没有进行验证）：</p><ol><li>验证服务器端的身份</li><li>实现SUNDR协议</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;MIT6.858最后一个实验是复现论文&lt;a href=&quot;https://www.usenix.org/legacy/event/osdi04/tech/full_papers/li_j/li_j.pdf&quot;&gt;Secure Untrusted Data</summary>
        
      
    
    
    
    <category term="安全" scheme="https://luolibrary.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="学习" scheme="https://luolibrary.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CS149-Extra-Assignment-Implement Dense Matrix-Matrix Multiplication</title>
    <link href="https://luolibrary.com/2023/08/27/CS149-Extra-Assignment-Implement-Dense-Matrix-Matrix-Multiplication/"/>
    <id>https://luolibrary.com/2023/08/27/CS149-Extra-Assignment-Implement-Dense-Matrix-Matrix-Multiplication/</id>
    <published>2023-08-27T07:48:12.000Z</published>
    <updated>2024-08-11T15:08:00.500Z</updated>
    
    <content type="html"><![CDATA[<p>It’s hard to implement Matrix-Matrix Multiplication. So I recommend the following repository for you. I also refer to this repository when doing this assignment.</p><ul><li><a href="https://github.com/flame/blislab">blislab</a></li></ul><h2 id="The-native-implementation"><a href="#The-native-implementation" class="headerlink" title="The native implementation"></a>The native implementation</h2><p>We do not use 2-D array, we flat the array to one dimension. We assume that $A$ is $M \times K$, $B$ is $K \times N$, and $C$ is $M \times N$. We need to implement the $\alpha A \times B + \beta \times C$.</p><p><img src="https://s2.loli.net/2023/08/23/dHTJDkhwBfIiA74.png" alt="Flatten matrix multiplication"></p><p>We could calculate the following:</p><ul><li>$C[0] &#x3D; A[0]B[0] + A[1]B[N] + \cdots + A[K - 1]B[(K - 1)N]$</li><li>$C[1] &#x3D; A[K]B[1] + A[K + 1]B[N + 1] + \cdots + A[2K - 1]B[(K - 1)N + 1]$</li></ul><p>Thus, we could writing the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Gemm</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Disable constructor</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">Gemm</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Calculate the GEMM sequentially</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @details The matrix A, B, C are all one-dimensional array, so the need</span></span><br><span class="line"><span class="comment">   * to find the way to calculate the matrix multiplication.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemm</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B, <span class="type">double</span> *C,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="type">double</span> inner_pod = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; kk++) &#123;</span><br><span class="line">          inner_pod += A[i * k + kk] * B[kk * n + j];</span><br><span class="line">        &#125;</span><br><span class="line">        C[i * n + j] = alpha * inner_pod + beta * C[i * n + j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gemm</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B, <span class="type">double</span> *C, <span class="type">double</span> alpha,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">  Gemm::<span class="built_in">gemm</span>(m, n, k, A, B, C, alpha, beta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We assume that $A$ is $1024 \times 1024$ and $B$ is $1024 \times 1024$, we could see that the Intel mkl library would only execute 18ms, the reference implementation would execute 62ms. However, the native implementation executes 5746ms.</p><p><img src="https://s2.loli.net/2023/08/24/AJwG1Nect8qREkh.png" alt="The native implementation result"></p><h2 id="Blocked-matrix-multiplication"><a href="#Blocked-matrix-multiplication" class="headerlink" title="Blocked matrix multiplication"></a>Blocked matrix multiplication</h2><p>The efficiency is low because we do not use the cache. So the idea is use the blocked matrix multiplication thus improving the cache hit rate. The idea is intuitive. If you’are not familiar with the<br>blocked multiplication, I recommend you to read some materials.</p><p>From the below figure, we first need to split the matrix into the blocked matrices. We assume each block would be the $size \times size$. For $A$, we first need to split for the row $M$. And for $B$, we need to split for the col $N$. And for both $A$ and $B$, we could simultaneously handle $K$. However, the trouble is that we need to know each block top-left coordinate, because we need to find the absolute position. So we should define the coordinates for the absolute position.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief A wrapper to wrap the coordinates for indicating the</span></span><br><span class="line"><span class="comment"> * start left-top point for the current blocked matrix.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">  <span class="type">int</span> i&#123;&#125;; <span class="comment">/**&lt; The absolute i */</span></span><br><span class="line">  <span class="type">int</span> j&#123;&#125;; <span class="comment">/**&lt; The absolute j */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/08/27/kMEThCBtFmDdW82.png" alt="Blocked matrix-matrix multiplication"></p><p>So we need to first split for $M$ and for $N$, then for $K$, we could get the following incomplete c++ code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += size;) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += size;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; k += size) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the first loop, we should set the $A$’s start point of <code>i</code> and we also need to tell whether <code>i + size &lt; m</code>. Similarly, in the second loop, we should set the $B$’s start point of <code>j</code> and we also need to tell whether <code>j + size &lt; n</code>. In the last loop, we should set the $A$’s start point of <code>j</code> and $B$’s start point of <code>i</code> and also need to tell whether <code>k + size &lt; kk</code>.</p><p>It’s easy to calculate the start points of $C$. It is dependent on the <code>i</code> and <code>j</code>. Thus we could have the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Point2D a&#123;&#125;, b&#123;&#125;, c&#123;&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += size) &#123;</span><br><span class="line">  <span class="type">int</span> mBlock = i + size &lt; m ? size : m - i;</span><br><span class="line">  a.i = i;</span><br><span class="line">  c.i = i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += size) &#123;</span><br><span class="line">    b.j = j;</span><br><span class="line">    c.j = j;</span><br><span class="line">    <span class="type">int</span> nBlock = j + size &lt; n ? size : n - j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; kk += size) &#123;</span><br><span class="line">      a.j = kk;</span><br><span class="line">      b.i = kk;</span><br><span class="line">      <span class="type">int</span> kBlock = kk + size &lt; k ? size : k - kk;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At now, it’s not hard to write the calculate:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GemmBlock</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Disable constructor</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">GemmBlock</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Apply the C = beta C, it should be calculated at first.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">scalarMultiplication</span><span class="params">(<span class="type">int</span> mBlock, <span class="type">int</span> nBlock, <span class="type">int</span> n, Point2D &amp;c,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="type">double</span> *C, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mBlock; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nBlock; j++) &#123;</span><br><span class="line">        C[(i + c.i) * n + (j + c.j)] = beta * C[(i + c.i) * n + (j + c.j)];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Matrix multiplication with block</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @details In order to implement the block matrix multiplication, we need</span></span><br><span class="line"><span class="comment">   * to calculate the blocked matrix A and blocked matrix B. For example</span></span><br><span class="line"><span class="comment">   * A11 A12  B11 B12  C11 C12</span></span><br><span class="line"><span class="comment">   * A21 A22  B21 B22  C21 C22</span></span><br><span class="line"><span class="comment">   * C11 = A11 X b11 + A12 X B21</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">matrixMultiplicationBlock</span><span class="params">(<span class="type">int</span> mBlock, <span class="type">int</span> nBlock, <span class="type">int</span> kBlock,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">int</span> n, <span class="type">int</span> k, Point2D &amp;a, Point2D &amp;b,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Point2D &amp;c, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">double</span> *C, <span class="type">double</span> alpha)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mBlock; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nBlock; j++) &#123;</span><br><span class="line">        <span class="type">double</span> inner_pod = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; kBlock; kk++) &#123;</span><br><span class="line">          inner_pod +=</span><br><span class="line">              A[(i + a.i) * k + (kk + a.j)] * B[(kk + b.i) * n + (j + b.j)];</span><br><span class="line">        &#125;</span><br><span class="line">        C[(i + c.i) * n + (j + c.j)] += alpha * inner_pod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Split the matrix</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemmUsingBlock</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">double</span> *C, <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    Point2D a&#123;&#125;, b&#123;&#125;, c&#123;&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> size = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += size) &#123;</span><br><span class="line">      <span class="type">int</span> mBlock = i + size &lt; m ? size : m - i;</span><br><span class="line">      a.i = i;</span><br><span class="line">      c.i = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += size) &#123;</span><br><span class="line">        b.j = j;</span><br><span class="line">        c.j = j;</span><br><span class="line">        <span class="type">int</span> nBlock = j + size &lt; n ? size : n - j;</span><br><span class="line">        <span class="built_in">scalarMultiplication</span>(mBlock, nBlock, n, c, C, beta);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; kk += size) &#123;</span><br><span class="line">          a.j = kk;</span><br><span class="line">          b.i = kk;</span><br><span class="line">          <span class="type">int</span> kBlock = kk + size &lt; k ? size : k - kk;</span><br><span class="line">          <span class="built_in">matrixMultiplicationBlock</span>(mBlock, nBlock, kBlock, n, k, a, b, c, A, B,</span><br><span class="line">                                    C, alpha);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemm</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B, <span class="type">double</span> *C,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">gemmUsingBlock</span>(m, n, k, A, B, C, alpha, beta);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then executing <code>./gemm 1024</code>. As the result shows, we execute 843ms. It is much better than the native implementation.</p><p><img src="https://s2.loli.net/2023/08/27/YyUZxQDwveBTsGc.png" alt="Blocked matrix-matrix multiplication result"></p><h2 id="Blocked-matrix-multiplication-with-memory-layout-change"><a href="#Blocked-matrix-multiplication-with-memory-layout-change" class="headerlink" title="Blocked matrix multiplication with memory layout change"></a>Blocked matrix multiplication with memory layout change</h2><p>We can still improvement the efficiency, we still access the matrix $B$ with col. However, when the matrix size is big, it would cause cache miss. When executing <code>./gemm 2048</code>. The program would cause 7476ms. This is because the memory layout of $B$ is bad for cache hit. So we could change the layout of $B$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GemmBlockWithMemoryLayoutChange</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Disable constructor</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">GemmBlockWithMemoryLayoutChange</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">scalarMultiplication</span><span class="params">(<span class="type">int</span> mBlock, <span class="type">int</span> nBlock, <span class="type">int</span> n, Point2D &amp;c,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="type">double</span> *C, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mBlock; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nBlock; j++) &#123;</span><br><span class="line">        C[(i + c.i) * n + (j + c.j)] = beta * C[(i + c.i) * n + (j + c.j)];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">matrixMultiplicationBlock</span><span class="params">(<span class="type">int</span> mBlock, <span class="type">int</span> nBlock, <span class="type">int</span> kBlock,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">int</span> n, <span class="type">int</span> k, Point2D &amp;a, Point2D &amp;b,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Point2D &amp;c, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">double</span> *C, <span class="type">double</span> alpha)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mBlock; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nBlock; j++) &#123;</span><br><span class="line">        <span class="type">double</span> inner_pod = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; kBlock; kk++) &#123;</span><br><span class="line">          inner_pod +=</span><br><span class="line">              A[(i + a.i) * k + (kk + a.j)] * B[(j + b.i) * n + (kk + b.j)];</span><br><span class="line">        &#125;</span><br><span class="line">        C[(i + c.i) * n + (j + c.j)] += alpha * inner_pod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemmUsingBlock</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">double</span> *C, <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line">    Point2D a&#123;&#125;, b&#123;&#125;, c&#123;&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> size = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += size) &#123;</span><br><span class="line">      <span class="type">int</span> mBlock = i + size &lt; m ? size : m - i;</span><br><span class="line">      a.i = i;</span><br><span class="line">      c.i = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += size) &#123;</span><br><span class="line">        b.i = j;</span><br><span class="line">        c.j = j;</span><br><span class="line">        <span class="type">int</span> nBlock = j + size &lt; n ? size : n - j;</span><br><span class="line">        <span class="built_in">scalarMultiplication</span>(mBlock, nBlock, n, c, C, beta);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; kk += size) &#123;</span><br><span class="line">          a.j = kk;</span><br><span class="line">          b.j = kk;</span><br><span class="line">          <span class="type">int</span> kBlock = kk + size &lt; k ? size : k - kk;</span><br><span class="line">          <span class="built_in">matrixMultiplicationBlock</span>(mBlock, nBlock, kBlock, n, k, a, b, c, A, B,</span><br><span class="line">                                    C, alpha);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemm</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B, <span class="type">double</span> *C,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> *newB = <span class="keyword">new</span> <span class="type">double</span>[n * k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        newB[j * k + i] = B[i * n + j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gemmUsingBlock</span>(m, n, k, A, newB, C, alpha, beta);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] newB;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then executing <code>./gemm 1024</code>. As the result shows, we execute 478ms. We gain more performance.</p><p><img src="https://s2.loli.net/2023/08/27/VhNcertR6vYDEim.png" alt="Blocked matrix-matrix multiplication with memory layout change result"></p><h2 id="Blocking-for-multiple-levels-of-cache"><a href="#Blocking-for-multiple-levels-of-cache" class="headerlink" title="Blocking for multiple levels of cache"></a>Blocking for multiple levels of cache</h2><p>It’s hard to explain this idea, you should carefully read the <a href="https://github.com/flame/blislab">blislab</a> tutorial and read the following paper carefully:</p><ul><li><a href="https://dl.acm.org/doi/10.1145/1356052.1356053">Anatomy of High-Performance Matrix Multiplication</a></li></ul><p>I follow the below figure to implement the algorithm.</p><p><img src="https://s2.loli.net/2024/08/11/7iTaYZnUWkVv82P.png" alt="Three Cache Level Matrix Multiplication"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GemmBlockWithThreeCacheLevel</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Disable constructing this class</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="built_in">GemmBlockWithThreeCacheLevel</span>() = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">matrixMultiplicationBlock</span><span class="params">(<span class="type">int</span> mBlock, <span class="type">int</span> nBlock, <span class="type">int</span> kBlock,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">int</span> n, <span class="type">int</span> k, Point2D &amp;a, Point2D &amp;b,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Point2D &amp;c, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">double</span> *C, <span class="type">double</span> alpha)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mBlock; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nBlock; j++) &#123;</span><br><span class="line">        <span class="type">double</span> inner_pod = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; kBlock; kk++) &#123;</span><br><span class="line">          inner_pod +=</span><br><span class="line">              A[(i + a.i) * k + (kk + a.j)] * B[(j + b.i) * k + (kk + b.j)];</span><br><span class="line">        &#125;</span><br><span class="line">        C[(i + c.i) * n + (j + c.j)] += alpha * inner_pod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @brief Use five loop tp calculate the matrix-matrix multiplication, for</span></span><br><span class="line"><span class="comment">   * simplicity here, I only implement C = alpha AB.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemmUsingBlock</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="type">double</span> *C, <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> sizeN = <span class="number">4096</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> sizeK = <span class="number">256</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> sizeM = <span class="number">96</span>;</span><br><span class="line"></span><br><span class="line">    Point2D a&#123;&#125;, b&#123;&#125;, c&#123;&#125;, ra&#123;&#125;, rb&#123;&#125;, rc&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> rSizeN = <span class="number">4</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> rSizeM = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We need to create pack A and pack B. It&#x27;s a bad idea to allocate</span></span><br><span class="line">    <span class="comment">// memory in the loop.</span></span><br><span class="line">    <span class="type">double</span> *packedA = <span class="keyword">new</span> <span class="type">double</span>[sizeM * sizeK];</span><br><span class="line">    <span class="type">double</span> *packedB = <span class="keyword">new</span> <span class="type">double</span>[sizeN * sizeK];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += sizeN) &#123;</span><br><span class="line">      <span class="comment">// In this loop, we only handle for the matrix B, it would</span></span><br><span class="line">      <span class="comment">// be split up by `sizeN` for the col.</span></span><br><span class="line">      b.j = j;</span><br><span class="line">      c.j = j;</span><br><span class="line">      <span class="type">int</span> nBlock = j + sizeN &lt; n ? sizeN : n - j;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> kk = <span class="number">0</span>; kk &lt; k; kk += sizeK) &#123;</span><br><span class="line">        <span class="comment">// In this loop, we handle for the matrix A and matrix B.</span></span><br><span class="line">        <span class="comment">// For the matrix A it would be split up by `sizeK` for the col</span></span><br><span class="line">        <span class="comment">// For the matrix B it would be split up by `sizeK` for the row</span></span><br><span class="line">        a.j = kk;</span><br><span class="line">        b.i = kk;</span><br><span class="line">        <span class="type">int</span> kBlock = kk + sizeK &lt; k ? sizeK : k - kk;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At here, we should pack the B into a consecutive memory, in</span></span><br><span class="line">        <span class="comment">// order to improve the cache hit rate and avoid TLB miss. We make</span></span><br><span class="line">        <span class="comment">// `packedB` into the L3 cache, So the L3 size should be greater</span></span><br><span class="line">        <span class="comment">// than the `sizeN * sizeK`. So in the following `for` loop all</span></span><br><span class="line">        <span class="comment">// the access to the `packedB` would gain great efficiency. And we</span></span><br><span class="line">        <span class="comment">// will convert the row-major to the col-major.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j_ = <span class="number">0</span>; j_ &lt; nBlock; j_++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i_ = <span class="number">0</span>; i_ &lt; kBlock; i_++) &#123;</span><br><span class="line">            packedB[j_ * sizeK + i_] = B[(b.i + i_) * n + (b.j + j_)];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += sizeM) &#123;</span><br><span class="line">          <span class="comment">// In this loop, we handle for the matrix A, it would be split</span></span><br><span class="line">          <span class="comment">// up by the `sizeI` for the row.</span></span><br><span class="line">          a.i = i;</span><br><span class="line">          c.i = i;</span><br><span class="line">          <span class="type">int</span> mBlock = i + sizeM &lt; m ? sizeM : m - i;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// At here, we should pack the A into a consecutive memory, in</span></span><br><span class="line">          <span class="comment">// order to improve the cache hit rate and avoid TLB miss. We</span></span><br><span class="line">          <span class="comment">// make `packedA` into the L2 cache, so the L2 cache must be</span></span><br><span class="line">          <span class="comment">// greater than `sizeM * sizeK`. So the following `for` loop</span></span><br><span class="line">          <span class="comment">// for accessing to the `packedA` would get great efficiency.</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i_ = <span class="number">0</span>; i_ &lt; mBlock; i_++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j_ = <span class="number">0</span>; j_ &lt; kBlock; j_++) &#123;</span><br><span class="line">              packedA[i_ * sizeK + j_] = A[(a.i + i_) * k + (a.j + j_)];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Here, we already split the matrix A and matrix B into the block.</span></span><br><span class="line">          <span class="comment">// However, we need to split again just like the above, this would</span></span><br><span class="line">          <span class="comment">// be super easy.</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> jr = <span class="number">0</span>; jr &lt; nBlock; jr += rSizeN) &#123;</span><br><span class="line">            <span class="type">int</span> rNBlock = jr + rSizeN &lt; nBlock ? rSizeN : nBlock - jr;</span><br><span class="line">            rb.i = jr;</span><br><span class="line">            rc.j = jr + c.j;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> ri = <span class="number">0</span>; ri &lt; mBlock; ri += rSizeM) &#123;</span><br><span class="line">              <span class="type">int</span> rMBlock = ri + rSizeM &lt; mBlock ? rSizeM : mBlock - ri;</span><br><span class="line">              ra.i = ri;</span><br><span class="line">              rc.i = ri + c.i;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> (<span class="type">int</span> internalK = <span class="number">0</span>; internalK &lt; kBlock; internalK++) &#123;</span><br><span class="line">                ra.j = internalK;</span><br><span class="line">                rb.j = internalK;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">matrixMultiplicationBlock</span>(rMBlock, rNBlock, <span class="number">1</span>, n, sizeK, ra, rb,</span><br><span class="line">                                          rc, packedA, packedB, C, alpha);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] packedA;</span><br><span class="line">    <span class="keyword">delete</span>[] packedB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">gemm</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">double</span> *A, <span class="type">double</span> *B, <span class="type">double</span> *C,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">double</span> alpha, <span class="type">double</span> beta)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">gemmUsingBlock</span>(m, n, k, A, B, C, alpha, beta);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;It’s hard to implement Matrix-Matrix Multiplication. So I recommend the following repository for you. I also refer to this repository</summary>
        
      
    
    
    
    <category term="CS149" scheme="https://luolibrary.com/categories/CS149/"/>
    
    
    <category term="技术" scheme="https://luolibrary.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="https://luolibrary.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
